{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thato\\\\Downloads\\\\car-app\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null\n};\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_VEHICLES':\n      return {\n        ...state,\n        vehicles: action.payload\n      };\n    case 'ADD_VEHICLE':\n      return {\n        ...state,\n        vehicles: [...state.vehicles, action.payload]\n      };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v)\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload)\n      };\n    case 'SET_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    case 'ADD_LISTING':\n      return {\n        ...state,\n        listings: [...state.listings, action.payload]\n      };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l)\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload)\n      };\n    case 'SET_TRADES':\n      return {\n        ...state,\n        trades: action.payload\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        trades: [...state.trades, action.payload]\n      };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_CONVERSATIONS':\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case 'SET_REVIEWS':\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_ALL_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState('garage');\n  useEffect(() => {\n    // Initialize app state\n    const currentUser = AuthService.getCurrentUser();\n    if (currentUser) {\n      dispatch({\n        type: 'SET_USER',\n        payload: currentUser\n      });\n      loadUserData(currentUser.id);\n    }\n    // Always load all users for the seller profiles\n    dispatch({\n      type: 'SET_USERS',\n      payload: DataService.getAllUsers()\n    });\n  }, []);\n  const loadUserData = userId => {\n    dispatch({\n      type: 'SET_VEHICLES',\n      payload: DataService.getUserVehicles(userId)\n    });\n    dispatch({\n      type: 'SET_LISTINGS',\n      payload: DataService.getUserListings(userId)\n    });\n    dispatch({\n      type: 'SET_TRADES',\n      payload: DataService.getUserTrades(userId)\n    });\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: DataService.getUserMessages(userId)\n    });\n    dispatch({\n      type: 'SET_CONVERSATIONS',\n      payload: DataService.getUserConversations(userId)\n    });\n  };\n  const login = async (username, password, rememberMe = false) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const result = await ApiService.login(username, password);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoUser = result.user;\n      const user = {\n        ...mongoUser,\n        id: mongoUser._id || mongoUser.id\n      };\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      await loadUserData(user.id);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || 'Login failed'\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const result = await ApiService.register(userData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoUser = result.user;\n      const user = {\n        ...mongoUser,\n        id: mongoUser._id || mongoUser.id\n      };\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      await loadUserData(user.id);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || 'Registration failed'\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    AuthService.logout();\n    dispatch({\n      type: 'SET_USER',\n      payload: null\n    });\n    dispatch({\n      type: 'SET_VEHICLES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_LISTINGS',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_TRADES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_CONVERSATIONS',\n      payload: []\n    });\n    setActiveTab('garage');\n  };\n  const updateUser = user => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n  const addVehicle = vehicleData => {\n    if (!state.currentUser) return;\n    const newVehicle = {\n      ...vehicleData,\n      id: DataService.generateId(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    DataService.addVehicle(newVehicle);\n    dispatch({\n      type: 'ADD_VEHICLE',\n      payload: newVehicle\n    });\n  };\n  const updateVehicle = updatedVehicle => {\n    const vehicle = {\n      ...updatedVehicle,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateVehicle(vehicle);\n    dispatch({\n      type: 'UPDATE_VEHICLE',\n      payload: vehicle\n    });\n  };\n  const deleteVehicle = vehicleId => {\n    DataService.deleteVehicle(vehicleId);\n    dispatch({\n      type: 'DELETE_VEHICLE',\n      payload: vehicleId\n    });\n  };\n  const addListing = listingData => {\n    if (!state.currentUser) return;\n    const newListing = {\n      ...listingData,\n      id: DataService.generateId(),\n      views: 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    DataService.addListing(newListing);\n    dispatch({\n      type: 'ADD_LISTING',\n      payload: newListing\n    });\n\n    // Update vehicle to mark as listed\n    const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n    if (vehicle) {\n      const updatedVehicle = {\n        ...vehicle,\n        isListed: true,\n        listingId: newListing.id,\n        updatedAt: new Date().toISOString()\n      };\n      DataService.updateVehicle(updatedVehicle);\n      dispatch({\n        type: 'UPDATE_VEHICLE',\n        payload: updatedVehicle\n      });\n    }\n  };\n  const updateListing = updatedListing => {\n    const listing = {\n      ...updatedListing,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateListing(listing);\n    dispatch({\n      type: 'UPDATE_LISTING',\n      payload: listing\n    });\n  };\n  const deleteListing = listingId => {\n    const listing = state.listings.find(l => l.id === listingId);\n    DataService.deleteListing(listingId);\n    dispatch({\n      type: 'DELETE_LISTING',\n      payload: listingId\n    });\n\n    // Update vehicle to remove listing status\n    if (listing) {\n      const vehicle = state.vehicles.find(v => v.id === listing.vehicleId);\n      if (vehicle) {\n        const updatedVehicle = {\n          ...vehicle,\n          isListed: false,\n          listingId: undefined,\n          updatedAt: new Date().toISOString()\n        };\n        DataService.updateVehicle(updatedVehicle);\n        dispatch({\n          type: 'UPDATE_VEHICLE',\n          payload: updatedVehicle\n        });\n      }\n    }\n  };\n  const renewListing = listingId => {\n    const listing = state.listings.find(l => l.id === listingId);\n    if (!listing) return;\n    const now = new Date();\n    const renewedListing = {\n      ...listing,\n      lastRenewed: now.toISOString(),\n      canRenewAfter: new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString(),\n      // 24 hours from now\n      updatedAt: now.toISOString()\n    };\n    DataService.updateListing(renewedListing);\n    dispatch({\n      type: 'UPDATE_LISTING',\n      payload: renewedListing\n    });\n  };\n  const incrementListingViews = listingId => {\n    const listing = state.listings.find(l => l.id === listingId);\n    if (!listing) return;\n    const updatedListing = {\n      ...listing,\n      views: listing.views + 1,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateListing(updatedListing);\n    dispatch({\n      type: 'UPDATE_LISTING',\n      payload: updatedListing\n    });\n  };\n  const loadAllListings = () => {\n    const enrichedListings = DataService.getEnrichedListings();\n    const users = DataService.getAllUsers();\n    const reviews = DataService.getReviews();\n\n    // Calculate ratings and review counts for each user\n    const usersWithRatings = users.map(user => {\n      const userReviews = reviews.filter(r => r.revieweeId === user.id);\n      const rating = userReviews.length > 0 ? userReviews.reduce((sum, r) => sum + r.rating, 0) / userReviews.length : undefined;\n      const reviewCount = userReviews.length;\n      return {\n        ...user,\n        rating,\n        reviewCount\n      };\n    });\n\n    // Update listings with enriched seller data\n    const listingsWithEnrichedSellers = enrichedListings.map(listing => ({\n      ...listing,\n      seller: usersWithRatings.find(u => u.id === listing.sellerId) || listing.seller\n    }));\n    dispatch({\n      type: 'SET_ALL_LISTINGS',\n      payload: listingsWithEnrichedSellers\n    });\n    dispatch({\n      type: 'SET_USERS',\n      payload: usersWithRatings\n    });\n    dispatch({\n      type: 'SET_REVIEWS',\n      payload: reviews\n    });\n  };\n  const addReview = reviewData => {\n    const newReview = {\n      ...reviewData,\n      id: DataService.generateId(),\n      createdAt: new Date().toISOString()\n    };\n    DataService.addReview(newReview);\n    // Reload all data to update ratings\n    loadAllListings();\n  };\n  const getUserProfile = userId => {\n    return state.users.find(u => u.id === userId) || null;\n  };\n  const sendMessage = messageData => {\n    const newMessage = {\n      ...messageData,\n      id: DataService.generateId(),\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    DataService.addMessage(newMessage);\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: newMessage\n    });\n\n    // Reload conversations\n    if (state.currentUser) {\n      dispatch({\n        type: 'SET_CONVERSATIONS',\n        payload: DataService.getUserConversations(state.currentUser.id)\n      });\n    }\n  };\n  const markMessagesAsRead = conversationId => {\n    if (!state.currentUser) return;\n    DataService.markMessagesAsRead(conversationId, state.currentUser.id);\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: DataService.getUserMessages(state.currentUser.id)\n    });\n    dispatch({\n      type: 'SET_CONVERSATIONS',\n      payload: DataService.getUserConversations(state.currentUser.id)\n    });\n  };\n  const addTrade = tradeData => {\n    const newTrade = {\n      ...tradeData,\n      id: DataService.generateId(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    DataService.addTrade(newTrade);\n    dispatch({\n      type: 'ADD_TRADE',\n      payload: newTrade\n    });\n  };\n  const updateTrade = updatedTrade => {\n    const trade = {\n      ...updatedTrade,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateTrade(trade);\n    dispatch({\n      type: 'UPDATE_TRADE',\n      payload: trade\n    });\n  };\n  const value = {\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"JpwclWyOxcRvzhtE291B4vMY+pw=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","AuthService","DataService","ApiService","jsxDEV","_jsxDEV","initialState","currentUser","vehicles","listings","auctions","trades","messages","conversations","reviews","users","isAuthenticated","loading","error","appReducer","state","action","type","payload","map","v","id","filter","l","t","AppContext","undefined","AppProvider","children","_s","dispatch","activeTab","setActiveTab","useState","getCurrentUser","loadUserData","getAllUsers","userId","getUserVehicles","getUserListings","getUserTrades","getUserMessages","getUserConversations","login","username","password","rememberMe","result","mongoUser","user","_id","success","message","register","userData","logout","updateUser","console","log","addVehicle","vehicleData","newVehicle","generateId","createdAt","Date","toISOString","updatedAt","updateVehicle","updatedVehicle","vehicle","deleteVehicle","vehicleId","addListing","listingData","newListing","views","find","isListed","listingId","updateListing","updatedListing","listing","deleteListing","renewListing","now","renewedListing","lastRenewed","canRenewAfter","getTime","incrementListingViews","loadAllListings","enrichedListings","getEnrichedListings","getReviews","usersWithRatings","userReviews","r","revieweeId","rating","length","reduce","sum","reviewCount","listingsWithEnrichedSellers","seller","u","sellerId","addReview","reviewData","newReview","getUserProfile","sendMessage","messageData","newMessage","timestamp","read","addMessage","markMessagesAsRead","conversationId","addTrade","tradeData","newTrade","updateTrade","updatedTrade","trade","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/thato/Downloads/car-app/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { AppState, User, Vehicle, Listing, Auction, Trade, Message, Conversation, Review, NavigationTab } from '../types/index.ts';\r\nimport { AuthService } from '../services/authService.ts';\r\nimport { DataService } from '../services/dataService.ts';\r\nimport ApiService from '../services/apiService.ts';\r\n\r\ninterface AppContextType {\r\n  state: AppState;\r\n  dispatch: React.Dispatch<AppAction>;\r\n  login: (username: string, password: string, rememberMe?: boolean) => Promise<{ success: boolean; error?: string }>;\r\n  register: (userData: Omit<User, 'id' | 'createdAt'>) => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => void;\r\n  updateUser: (user: User) => void;\r\n  addVehicle: (vehicle: Omit<Vehicle, 'id' | 'createdAt' | 'updatedAt'>) => void;\r\n  updateVehicle: (vehicle: Vehicle) => void;\r\n  deleteVehicle: (vehicleId: string) => void;\r\n  addListing: (listing: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => void;\r\n  updateListing: (listing: Listing) => void;\r\n  deleteListing: (listingId: string) => void;\r\n  renewListing: (listingId: string) => void;\r\n  incrementListingViews: (listingId: string) => void;\r\n  loadAllListings: () => void;\r\n  addReview: (review: Omit<Review, 'id' | 'createdAt'>) => void;\r\n  getUserProfile: (userId: string) => User | null;\r\n  sendMessage: (message: Omit<Message, 'id' | 'timestamp' | 'read'>) => void;\r\n  markMessagesAsRead: (conversationId: string) => void;\r\n  addTrade: (trade: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => void;\r\n  updateTrade: (trade: Trade) => void;\r\n  activeTab: NavigationTab;\r\n  setActiveTab: (tab: NavigationTab) => void;\r\n}\r\n\r\ntype AppAction =\r\n  | { type: 'SET_USER'; payload: User | null }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_VEHICLES'; payload: Vehicle[] }\r\n  | { type: 'ADD_VEHICLE'; payload: Vehicle }\r\n  | { type: 'UPDATE_VEHICLE'; payload: Vehicle }\r\n  | { type: 'DELETE_VEHICLE'; payload: string }\r\n  | { type: 'SET_LISTINGS'; payload: Listing[] }\r\n  | { type: 'ADD_LISTING'; payload: Listing }\r\n  | { type: 'UPDATE_LISTING'; payload: Listing }\r\n  | { type: 'DELETE_LISTING'; payload: string }\r\n  | { type: 'SET_TRADES'; payload: Trade[] }\r\n  | { type: 'ADD_TRADE'; payload: Trade }\r\n  | { type: 'UPDATE_TRADE'; payload: Trade }\r\n  | { type: 'SET_MESSAGES'; payload: Message[] }\r\n  | { type: 'ADD_MESSAGE'; payload: Message }\r\n  | { type: 'SET_CONVERSATIONS'; payload: Conversation[] }\r\n  | { type: 'SET_REVIEWS'; payload: Review[] }\r\n  | { type: 'SET_USERS'; payload: User[] }\r\n  | { type: 'SET_ALL_LISTINGS'; payload: Listing[] }\r\n  | { type: 'SET_ACTIVE_TAB'; payload: NavigationTab };\r\n\r\nconst initialState: AppState = {\r\n  currentUser: null,\r\n  vehicles: [],\r\n  listings: [],\r\n  auctions: [],\r\n  trades: [],\r\n  messages: [],\r\n  conversations: [],\r\n  reviews: [],\r\n  users: [],\r\n  isAuthenticated: false,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nfunction appReducer(state: AppState, action: AppAction): AppState {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        isAuthenticated: action.payload !== null,\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_VEHICLES':\r\n      return { ...state, vehicles: action.payload };\r\n    case 'ADD_VEHICLE':\r\n      return { ...state, vehicles: [...state.vehicles, action.payload] };\r\n    case 'UPDATE_VEHICLE':\r\n      return {\r\n        ...state,\r\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v),\r\n      };\r\n    case 'DELETE_VEHICLE':\r\n      return {\r\n        ...state,\r\n        vehicles: state.vehicles.filter(v => v.id !== action.payload),\r\n      };\r\n    case 'SET_LISTINGS':\r\n      return { ...state, listings: action.payload };\r\n    case 'ADD_LISTING':\r\n      return { ...state, listings: [...state.listings, action.payload] };\r\n    case 'UPDATE_LISTING':\r\n      return {\r\n        ...state,\r\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l),\r\n      };\r\n    case 'DELETE_LISTING':\r\n      return {\r\n        ...state,\r\n        listings: state.listings.filter(l => l.id !== action.payload),\r\n      };\r\n    case 'SET_TRADES':\r\n      return { ...state, trades: action.payload };\r\n    case 'ADD_TRADE':\r\n      return { ...state, trades: [...state.trades, action.payload] };\r\n    case 'UPDATE_TRADE':\r\n      return {\r\n        ...state,\r\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t),\r\n      };\r\n    case 'SET_MESSAGES':\r\n      return { ...state, messages: action.payload };\r\n    case 'ADD_MESSAGE':\r\n      return { ...state, messages: [...state.messages, action.payload] };\r\n    case 'SET_CONVERSATIONS':\r\n      return { ...state, conversations: action.payload };\r\n    case 'SET_REVIEWS':\r\n      return { ...state, reviews: action.payload };\r\n    case 'SET_USERS':\r\n      return { ...state, users: action.payload };\r\n    case 'SET_ALL_LISTINGS':\r\n      return { ...state, listings: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\n\r\ninterface AppProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function AppProvider({ children }: AppProviderProps) {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const [activeTab, setActiveTab] = React.useState<NavigationTab>('garage');\r\n\r\n  useEffect(() => {\r\n    // Initialize app state\r\n    const currentUser = AuthService.getCurrentUser();\r\n    if (currentUser) {\r\n      dispatch({ type: 'SET_USER', payload: currentUser });\r\n      loadUserData(currentUser.id);\r\n    }\r\n    // Always load all users for the seller profiles\r\n    dispatch({ type: 'SET_USERS', payload: DataService.getAllUsers() });\r\n  }, []);\r\n\r\n  const loadUserData = (userId: string) => {\r\n    dispatch({ type: 'SET_VEHICLES', payload: DataService.getUserVehicles(userId) });\r\n    dispatch({ type: 'SET_LISTINGS', payload: DataService.getUserListings(userId) });\r\n    dispatch({ type: 'SET_TRADES', payload: DataService.getUserTrades(userId) });\r\n    dispatch({ type: 'SET_MESSAGES', payload: DataService.getUserMessages(userId) });\r\n    dispatch({ type: 'SET_CONVERSATIONS', payload: DataService.getUserConversations(userId) });\r\n  };\r\n\r\n  const login = async (username: string, password: string, rememberMe: boolean = false) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    try {\r\n      const result = await ApiService.login(username, password);\r\n      // Convert MongoDB _id to id for frontend compatibility\r\n      const mongoUser = result.user as any;\r\n      const user = { ...mongoUser, id: mongoUser._id || mongoUser.id };\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      await loadUserData(user.id);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || 'Login failed' });\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: false, error: error.message || 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const register = async (userData: Omit<User, 'id' | 'createdAt'>) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    try {\r\n      const result = await ApiService.register(userData);\r\n      // Convert MongoDB _id to id for frontend compatibility\r\n      const mongoUser = result.user as any;\r\n      const user = { ...mongoUser, id: mongoUser._id || mongoUser.id };\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      await loadUserData(user.id);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || 'Registration failed' });\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: false, error: error.message || 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    AuthService.logout();\r\n    dispatch({ type: 'SET_USER', payload: null });\r\n    dispatch({ type: 'SET_VEHICLES', payload: [] });\r\n    dispatch({ type: 'SET_LISTINGS', payload: [] });\r\n    dispatch({ type: 'SET_TRADES', payload: [] });\r\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\r\n    dispatch({ type: 'SET_CONVERSATIONS', payload: [] });\r\n    setActiveTab('garage');\r\n  };\r\n\r\n  const updateUser = (user: User) => {\r\n    try {\r\n      console.log('Context updateUser called with:', user);\r\n      AuthService.updateUser(user);\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      console.log('User updated successfully in context');\r\n    } catch (error) {\r\n      console.error('Error in context updateUser:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const addVehicle = (vehicleData: Omit<Vehicle, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    if (!state.currentUser) return;\r\n\r\n    const newVehicle: Vehicle = {\r\n      ...vehicleData,\r\n      id: DataService.generateId(),\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    DataService.addVehicle(newVehicle);\r\n    dispatch({ type: 'ADD_VEHICLE', payload: newVehicle });\r\n  };\r\n\r\n  const updateVehicle = (updatedVehicle: Vehicle) => {\r\n    const vehicle = { ...updatedVehicle, updatedAt: new Date().toISOString() };\r\n    DataService.updateVehicle(vehicle);\r\n    dispatch({ type: 'UPDATE_VEHICLE', payload: vehicle });\r\n  };\r\n\r\n  const deleteVehicle = (vehicleId: string) => {\r\n    DataService.deleteVehicle(vehicleId);\r\n    dispatch({ type: 'DELETE_VEHICLE', payload: vehicleId });\r\n  };\r\n\r\n  const addListing = (listingData: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => {\r\n    if (!state.currentUser) return;\r\n\r\n    const newListing: Listing = {\r\n      ...listingData,\r\n      id: DataService.generateId(),\r\n      views: 0,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    DataService.addListing(newListing);\r\n    dispatch({ type: 'ADD_LISTING', payload: newListing });\r\n\r\n    // Update vehicle to mark as listed\r\n    const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\r\n    if (vehicle) {\r\n      const updatedVehicle: Vehicle = {\r\n        ...vehicle,\r\n        isListed: true,\r\n        listingId: newListing.id,\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n      DataService.updateVehicle(updatedVehicle);\r\n      dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\r\n    }\r\n  };\r\n\r\n  const updateListing = (updatedListing: Listing) => {\r\n    const listing = { ...updatedListing, updatedAt: new Date().toISOString() };\r\n    DataService.updateListing(listing);\r\n    dispatch({ type: 'UPDATE_LISTING', payload: listing });\r\n  };\r\n\r\n  const deleteListing = (listingId: string) => {\r\n    const listing = state.listings.find(l => l.id === listingId);\r\n    \r\n    DataService.deleteListing(listingId);\r\n    dispatch({ type: 'DELETE_LISTING', payload: listingId });\r\n\r\n    // Update vehicle to remove listing status\r\n    if (listing) {\r\n      const vehicle = state.vehicles.find(v => v.id === listing.vehicleId);\r\n      if (vehicle) {\r\n        const updatedVehicle: Vehicle = {\r\n          ...vehicle,\r\n          isListed: false,\r\n          listingId: undefined,\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        DataService.updateVehicle(updatedVehicle);\r\n        dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\r\n      }\r\n    }\r\n  };\r\n\r\n  const renewListing = (listingId: string) => {\r\n    const listing = state.listings.find(l => l.id === listingId);\r\n    if (!listing) return;\r\n\r\n    const now = new Date();\r\n    const renewedListing: Listing = {\r\n      ...listing,\r\n      lastRenewed: now.toISOString(),\r\n      canRenewAfter: new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours from now\r\n      updatedAt: now.toISOString(),\r\n    };\r\n\r\n    DataService.updateListing(renewedListing);\r\n    dispatch({ type: 'UPDATE_LISTING', payload: renewedListing });\r\n  };\r\n\r\n  const incrementListingViews = (listingId: string) => {\r\n    const listing = state.listings.find(l => l.id === listingId);\r\n    if (!listing) return;\r\n\r\n    const updatedListing: Listing = {\r\n      ...listing,\r\n      views: listing.views + 1,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    DataService.updateListing(updatedListing);\r\n    dispatch({ type: 'UPDATE_LISTING', payload: updatedListing });\r\n  };\r\n\r\n  const loadAllListings = () => {\r\n    const enrichedListings = DataService.getEnrichedListings();\r\n    const users = DataService.getAllUsers();\r\n    const reviews = DataService.getReviews();\r\n    \r\n    // Calculate ratings and review counts for each user\r\n    const usersWithRatings = users.map(user => {\r\n      const userReviews = reviews.filter(r => r.revieweeId === user.id);\r\n      const rating = userReviews.length > 0 \r\n        ? userReviews.reduce((sum, r) => sum + r.rating, 0) / userReviews.length \r\n        : undefined;\r\n      const reviewCount = userReviews.length;\r\n      \r\n      return {\r\n        ...user,\r\n        rating,\r\n        reviewCount\r\n      };\r\n    });\r\n    \r\n    // Update listings with enriched seller data\r\n    const listingsWithEnrichedSellers = enrichedListings.map(listing => ({\r\n      ...listing,\r\n      seller: usersWithRatings.find(u => u.id === listing.sellerId) || listing.seller\r\n    }));\r\n    \r\n    dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsWithEnrichedSellers });\r\n    dispatch({ type: 'SET_USERS', payload: usersWithRatings });\r\n    dispatch({ type: 'SET_REVIEWS', payload: reviews });\r\n  };\r\n\r\n  const addReview = (reviewData: Omit<Review, 'id' | 'createdAt'>) => {\r\n    const newReview: Review = {\r\n      ...reviewData,\r\n      id: DataService.generateId(),\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    DataService.addReview(newReview);\r\n    // Reload all data to update ratings\r\n    loadAllListings();\r\n  };\r\n\r\n  const getUserProfile = (userId: string): User | null => {\r\n    return state.users.find(u => u.id === userId) || null;\r\n  };\r\n\r\n  const sendMessage = (messageData: Omit<Message, 'id' | 'timestamp' | 'read'>) => {\r\n    const newMessage: Message = {\r\n      ...messageData,\r\n      id: DataService.generateId(),\r\n      timestamp: new Date().toISOString(),\r\n      read: false,\r\n    };\r\n\r\n    DataService.addMessage(newMessage);\r\n    dispatch({ type: 'ADD_MESSAGE', payload: newMessage });\r\n    \r\n    // Reload conversations\r\n    if (state.currentUser) {\r\n      dispatch({ type: 'SET_CONVERSATIONS', payload: DataService.getUserConversations(state.currentUser.id) });\r\n    }\r\n  };\r\n\r\n  const markMessagesAsRead = (conversationId: string) => {\r\n    if (!state.currentUser) return;\r\n    \r\n    DataService.markMessagesAsRead(conversationId, state.currentUser.id);\r\n    dispatch({ type: 'SET_MESSAGES', payload: DataService.getUserMessages(state.currentUser.id) });\r\n    dispatch({ type: 'SET_CONVERSATIONS', payload: DataService.getUserConversations(state.currentUser.id) });\r\n  };\r\n\r\n  const addTrade = (tradeData: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    const newTrade: Trade = {\r\n      ...tradeData,\r\n      id: DataService.generateId(),\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    DataService.addTrade(newTrade);\r\n    dispatch({ type: 'ADD_TRADE', payload: newTrade });\r\n  };\r\n\r\n  const updateTrade = (updatedTrade: Trade) => {\r\n    const trade = { ...updatedTrade, updatedAt: new Date().toISOString() };\r\n    DataService.updateTrade(trade);\r\n    dispatch({ type: 'UPDATE_TRADE', payload: trade });\r\n  };\r\n\r\n  const value: AppContextType = {\r\n    state,\r\n    dispatch,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    addVehicle,\r\n    updateVehicle,\r\n    deleteVehicle,\r\n    addListing,\r\n    updateListing,\r\n    deleteListing,\r\n    renewListing,\r\n    incrementListingViews,\r\n    loadAllListings,\r\n    addReview,\r\n    getUserProfile,\r\n    sendMessage,\r\n    markMessagesAsRead,\r\n    addTrade,\r\n    updateTrade,\r\n    activeTab,\r\n    setActiveTab,\r\n  };\r\n\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n}\r\n\r\nexport function useApp() {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}