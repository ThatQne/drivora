{"ast":null,"code":"// Mock car valuation service - in production, this would connect to a real API like Edmunds, KBB, etc.\nexport class CarValuationService {\n  static async getValuation(make, model, year, mileage, condition) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const normalizedMake = make.toLowerCase().replace(/\\s+/g, '');\n    const normalizedModel = model.toLowerCase().replace(/\\s+/g, '').replace('-', '');\n\n    // Get base value\n    let baseValue = 25000; // Default value\n    if (this.baseValues[normalizedMake] && this.baseValues[normalizedMake][normalizedModel]) {\n      baseValue = this.baseValues[normalizedMake][normalizedModel];\n    }\n\n    // Adjust for year (depreciation)\n    const currentYear = new Date().getFullYear();\n    const age = currentYear - year;\n    const depreciation = Math.max(0, Math.min(0.8, age * 0.08)); // 8% per year, max 80%\n    const yearAdjustedValue = baseValue * (1 - depreciation);\n\n    // Adjust for mileage\n    const averageMilesPerYear = 12000;\n    const expectedMileage = age * averageMilesPerYear;\n    const mileageAdjustment = Math.max(-0.3, Math.min(0.1, (expectedMileage - mileage) / 100000));\n    const mileageAdjustedValue = yearAdjustedValue * (1 + mileageAdjustment);\n\n    // Adjust for condition\n    const conditionMultipliers = {\n      excellent: 1.0,\n      good: 0.85,\n      fair: 0.65,\n      poor: 0.45\n    };\n    const conditionMultiplier = conditionMultipliers[condition] || 0.75;\n    const finalValue = Math.round(mileageAdjustedValue * conditionMultiplier);\n\n    // Calculate price range\n    const variance = finalValue * 0.15; // 15% variance\n    const priceRange = {\n      low: Math.round(finalValue - variance),\n      high: Math.round(finalValue + variance)\n    };\n    return {\n      make,\n      model,\n      year,\n      mileage,\n      condition,\n      estimatedValue: finalValue,\n      priceRange\n    };\n  }\n  static getPopularMakes() {\n    return ['Mazda', 'Toyota', 'Honda', 'Ford', 'Chevrolet', 'BMW', 'Mercedes-Benz', 'Audi', 'Volkswagen', 'Nissan', 'Hyundai'];\n  }\n  static getModelsForMake(make) {\n    const models = {\n      toyota: ['Camry', 'Corolla', 'Highlander', 'Prius', 'RAV4', 'Tacoma', 'Tundra'],\n      honda: ['Civic', 'Accord', 'CR-V', 'Pilot', 'HR-V', 'Ridgeline', 'Passport'],\n      ford: ['F-150', 'Mustang', 'Explorer', 'Escape', 'Focus', 'Edge', 'Expedition'],\n      chevrolet: ['Silverado', 'Malibu', 'Equinox', 'Tahoe', 'Cruze', 'Traverse', 'Suburban'],\n      bmw: ['3 Series', '5 Series', 'X3', 'X5', 'X1', 'X7', '7 Series'],\n      'mercedes-benz': ['C-Class', 'E-Class', 'GLC', 'GLE', 'A-Class', 'S-Class', 'GLA'],\n      mazda: ['CX-5', 'CX-9', 'RX7', 'NA', \"\"]\n    };\n    return models[make.toLowerCase().replace(/\\s+/g, '-')] || [];\n  }\n}\nCarValuationService.baseValues = {\n  toyota: {\n    camry: 25000,\n    corolla: 20000,\n    highlander: 35000,\n    prius: 27000,\n    rav4: 30000\n  },\n  honda: {\n    civic: 22000,\n    accord: 28000,\n    crv: 32000,\n    pilot: 38000,\n    hrv: 25000\n  },\n  ford: {\n    f150: 35000,\n    mustang: 30000,\n    explorer: 33000,\n    escape: 27000,\n    focus: 18000\n  },\n  chevrolet: {\n    silverado: 34000,\n    malibu: 24000,\n    equinox: 28000,\n    tahoe: 45000,\n    cruze: 19000\n  },\n  bmw: {\n    '3series': 40000,\n    '5series': 55000,\n    x3: 45000,\n    x5: 60000\n  },\n  mercedes: {\n    cclass: 42000,\n    eclass: 58000,\n    glc: 47000,\n    gle: 62000\n  }\n};","map":{"version":3,"names":["CarValuationService","getValuation","make","model","year","mileage","condition","Promise","resolve","setTimeout","normalizedMake","toLowerCase","replace","normalizedModel","baseValue","baseValues","currentYear","Date","getFullYear","age","depreciation","Math","max","min","yearAdjustedValue","averageMilesPerYear","expectedMileage","mileageAdjustment","mileageAdjustedValue","conditionMultipliers","excellent","good","fair","poor","conditionMultiplier","finalValue","round","variance","priceRange","low","high","estimatedValue","getPopularMakes","getModelsForMake","models","toyota","honda","ford","chevrolet","bmw","mazda","camry","corolla","highlander","prius","rav4","civic","accord","crv","pilot","hrv","f150","mustang","explorer","escape","focus","silverado","malibu","equinox","tahoe","cruze","x3","x5","mercedes","cclass","eclass","glc","gle"],"sources":["C:/Users/thato/Downloads/car-app/src/services/carValuationService.ts"],"sourcesContent":["import { CarValuation } from '../types/index.ts';\r\n\r\n// Mock car valuation service - in production, this would connect to a real API like Edmunds, KBB, etc.\r\nexport class CarValuationService {\r\n  private static baseValues: Record<string, Record<string, number>> = {\r\n    toyota: {\r\n      camry: 25000,\r\n      corolla: 20000,\r\n      highlander: 35000,\r\n      prius: 27000,\r\n      rav4: 30000,\r\n    },\r\n    honda: {\r\n      civic: 22000,\r\n      accord: 28000,\r\n      crv: 32000,\r\n      pilot: 38000,\r\n      hrv: 25000,\r\n    },\r\n    ford: {\r\n      f150: 35000,\r\n      mustang: 30000,\r\n      explorer: 33000,\r\n      escape: 27000,\r\n      focus: 18000,\r\n    },\r\n    chevrolet: {\r\n      silverado: 34000,\r\n      malibu: 24000,\r\n      equinox: 28000,\r\n      tahoe: 45000,\r\n      cruze: 19000,\r\n    },\r\n    bmw: {\r\n      '3series': 40000,\r\n      '5series': 55000,\r\n      x3: 45000,\r\n      x5: 60000,\r\n    },\r\n    mercedes: {\r\n      cclass: 42000,\r\n      eclass: 58000,\r\n      glc: 47000,\r\n      gle: 62000,\r\n    },\r\n  };\r\n\r\n  static async getValuation(\r\n    make: string,\r\n    model: string,\r\n    year: number,\r\n    mileage: number,\r\n    condition: string\r\n  ): Promise<CarValuation> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    const normalizedMake = make.toLowerCase().replace(/\\s+/g, '');\r\n    const normalizedModel = model.toLowerCase().replace(/\\s+/g, '').replace('-', '');\r\n    \r\n    // Get base value\r\n    let baseValue = 25000; // Default value\r\n    if (this.baseValues[normalizedMake] && this.baseValues[normalizedMake][normalizedModel]) {\r\n      baseValue = this.baseValues[normalizedMake][normalizedModel];\r\n    }\r\n\r\n    // Adjust for year (depreciation)\r\n    const currentYear = new Date().getFullYear();\r\n    const age = currentYear - year;\r\n    const depreciation = Math.max(0, Math.min(0.8, age * 0.08)); // 8% per year, max 80%\r\n    const yearAdjustedValue = baseValue * (1 - depreciation);\r\n\r\n    // Adjust for mileage\r\n    const averageMilesPerYear = 12000;\r\n    const expectedMileage = age * averageMilesPerYear;\r\n    const mileageAdjustment = Math.max(-0.3, Math.min(0.1, (expectedMileage - mileage) / 100000));\r\n    const mileageAdjustedValue = yearAdjustedValue * (1 + mileageAdjustment);\r\n\r\n    // Adjust for condition\r\n    const conditionMultipliers = {\r\n      excellent: 1.0,\r\n      good: 0.85,\r\n      fair: 0.65,\r\n      poor: 0.45,\r\n    };\r\n    const conditionMultiplier = conditionMultipliers[condition as keyof typeof conditionMultipliers] || 0.75;\r\n    const finalValue = Math.round(mileageAdjustedValue * conditionMultiplier);\r\n\r\n    // Calculate price range\r\n    const variance = finalValue * 0.15; // 15% variance\r\n    const priceRange = {\r\n      low: Math.round(finalValue - variance),\r\n      high: Math.round(finalValue + variance),\r\n    };\r\n\r\n    return {\r\n      make,\r\n      model,\r\n      year,\r\n      mileage,\r\n      condition,\r\n      estimatedValue: finalValue,\r\n      priceRange,\r\n    };\r\n  }\r\n\r\n  static getPopularMakes(): string[] {\r\n    return ['Mazda', 'Toyota', 'Honda', 'Ford', 'Chevrolet', 'BMW', 'Mercedes-Benz', 'Audi', 'Volkswagen', 'Nissan', 'Hyundai'];\r\n  }\r\n\r\n  static getModelsForMake(make: string): string[] {\r\n    const models: Record<string, string[]> = {\r\n      toyota: ['Camry', 'Corolla', 'Highlander', 'Prius', 'RAV4', 'Tacoma', 'Tundra'],\r\n      honda: ['Civic', 'Accord', 'CR-V', 'Pilot', 'HR-V', 'Ridgeline', 'Passport'],\r\n      ford: ['F-150', 'Mustang', 'Explorer', 'Escape', 'Focus', 'Edge', 'Expedition'],\r\n      chevrolet: ['Silverado', 'Malibu', 'Equinox', 'Tahoe', 'Cruze', 'Traverse', 'Suburban'],\r\n      bmw: ['3 Series', '5 Series', 'X3', 'X5', 'X1', 'X7', '7 Series'],\r\n      'mercedes-benz': ['C-Class', 'E-Class', 'GLC', 'GLE', 'A-Class', 'S-Class', 'GLA'],\r\n      mazda: ['CX-5', 'CX-9', 'RX7', 'NA', \"\"],\r\n    };\r\n\r\n    return models[make.toLowerCase().replace(/\\s+/g, '-')] || [];\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}