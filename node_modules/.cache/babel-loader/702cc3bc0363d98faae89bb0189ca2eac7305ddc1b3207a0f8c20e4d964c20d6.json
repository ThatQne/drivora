{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thato\\\\Downloads\\\\car-app\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null\n};\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_VEHICLES':\n      return {\n        ...state,\n        vehicles: action.payload\n      };\n    case 'ADD_VEHICLE':\n      return {\n        ...state,\n        vehicles: [...state.vehicles, action.payload]\n      };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v)\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload)\n      };\n    case 'SET_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    case 'ADD_LISTING':\n      return {\n        ...state,\n        listings: [...state.listings, action.payload]\n      };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l)\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload)\n      };\n    case 'SET_TRADES':\n      return {\n        ...state,\n        trades: action.payload\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        trades: [...state.trades, action.payload]\n      };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_CONVERSATIONS':\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case 'SET_REVIEWS':\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_ALL_LISTINGS':\n      return {\n        ...state,\n        allListings: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState('garage');\n  useEffect(() => {\n    // Initialize app state\n    const currentUser = AuthService.getCurrentUser();\n    if (currentUser) {\n      dispatch({\n        type: 'SET_USER',\n        payload: currentUser\n      });\n      loadUserData(currentUser.id);\n    }\n    // Load all users for the seller profiles using API\n    loadAllUsers();\n  }, []);\n  const loadUserData = async userId => {\n    try {\n      // Load user's vehicles\n      const vehicles = await ApiService.getUserVehicles();\n      const vehiclesWithId = vehicles.map(v => ({\n        ...v,\n        id: v._id || v.id\n      }));\n      dispatch({\n        type: 'SET_VEHICLES',\n        payload: vehiclesWithId\n      });\n\n      // Load user's listings (their own listings for garage management)\n      const userListings = await ApiService.getUserListings();\n      const userListingsWithId = userListings.map(l => ({\n        ...l,\n        id: l._id || l.id\n      }));\n      dispatch({\n        type: 'SET_LISTINGS',\n        payload: userListingsWithId\n      });\n\n      // Don't automatically load all public listings - only load when user visits listings tab\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    }\n  };\n  const loadAllUsers = async () => {\n    try {\n      const users = await ApiService.getAllUsers();\n      dispatch({\n        type: 'SET_USERS',\n        payload: users\n      });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_USERS',\n        payload: []\n      });\n    }\n  };\n  const login = async (username, password, rememberMe = false) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const result = await ApiService.login(username, password);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoUser = result.user;\n      const user = {\n        ...mongoUser,\n        id: mongoUser._id || mongoUser.id\n      };\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      await loadUserData(user.id);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || 'Login failed'\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const result = await ApiService.register(userData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoUser = result.user;\n      const user = {\n        ...mongoUser,\n        id: mongoUser._id || mongoUser.id\n      };\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      await loadUserData(user.id);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || 'Registration failed'\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    ApiService.logout();\n    dispatch({\n      type: 'SET_USER',\n      payload: null\n    });\n    dispatch({\n      type: 'SET_VEHICLES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_LISTINGS',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_TRADES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_CONVERSATIONS',\n      payload: []\n    });\n    setActiveTab('garage');\n  };\n  const updateUser = user => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n  const addVehicle = async vehicleData => {\n    if (!state.currentUser) return;\n    try {\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      dispatch({\n        type: 'ADD_VEHICLE',\n        payload: newVehicle\n      });\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n  const updateVehicle = async updatedVehicle => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({\n        type: 'UPDATE_VEHICLE',\n        payload: vehicle\n      });\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n  const deleteVehicle = async vehicleId => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({\n        type: 'DELETE_VEHICLE',\n        payload: vehicleId\n      });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n  const addListing = async listingData => {\n    if (!state.currentUser) return;\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      dispatch({\n        type: 'ADD_LISTING',\n        payload: newListing\n      });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: newListing.id,\n          updatedAt: new Date().toISOString()\n        };\n        // Update local state immediately\n        dispatch({\n          type: 'UPDATE_VEHICLE',\n          payload: updatedVehicle\n        });\n        // Then sync with backend\n        await updateVehicle(updatedVehicle);\n      }\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n  const updateListing = async updatedListing => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: listing\n      });\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n  const deleteListing = async listingId => {\n    try {\n      const listing = state.listings.find(l => l.id === listingId);\n      await ApiService.deleteListing(listingId);\n      dispatch({\n        type: 'DELETE_LISTING',\n        payload: listingId\n      });\n\n      // Update vehicle to remove listing status immediately in local state\n      if (listing) {\n        const vehicle = state.vehicles.find(v => v.id === listing.vehicleId);\n        if (vehicle) {\n          const updatedVehicle = {\n            ...vehicle,\n            isListed: false,\n            listingId: undefined,\n            updatedAt: new Date().toISOString()\n          };\n          // Update local state immediately\n          dispatch({\n            type: 'UPDATE_VEHICLE',\n            payload: updatedVehicle\n          });\n          // Then sync with backend\n          await updateVehicle(updatedVehicle);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n  const renewListing = async listingId => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = {\n        ...response.listing,\n        id: response.listing.id\n      };\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: renewedListing\n      });\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n  const incrementListingViews = async listingId => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n\n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString()\n        };\n        dispatch({\n          type: 'UPDATE_LISTING',\n          payload: updatedListing\n        });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n  const loadAllListings = async () => {\n    try {\n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      const listingsWithId = response.listings.map(l => {\n        var _l$vehicleId, _l$vehicleId2, _l$sellerId, _l$sellerId2;\n        return {\n          ...l,\n          id: l._id || l.id,\n          vehicleId: ((_l$vehicleId = l.vehicleId) === null || _l$vehicleId === void 0 ? void 0 : _l$vehicleId._id) || ((_l$vehicleId2 = l.vehicleId) === null || _l$vehicleId2 === void 0 ? void 0 : _l$vehicleId2.id) || l.vehicleId,\n          sellerId: ((_l$sellerId = l.sellerId) === null || _l$sellerId === void 0 ? void 0 : _l$sellerId._id) || ((_l$sellerId2 = l.sellerId) === null || _l$sellerId2 === void 0 ? void 0 : _l$sellerId2.id) || l.sellerId,\n          // Include populated vehicle and seller data\n          vehicle: l.vehicleId && typeof l.vehicleId === 'object' ? {\n            ...l.vehicleId,\n            id: l.vehicleId._id || l.vehicleId.id\n          } : null,\n          seller: l.sellerId && typeof l.sellerId === 'object' ? {\n            ...l.sellerId,\n            id: l.sellerId._id || l.sellerId.id\n          } : null\n        };\n      });\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: listingsWithId\n      });\n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: []\n      });\n    }\n  };\n  const addReview = async reviewData => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n  const getUserProfile = userId => {\n    return state.users.find(u => u.id === userId) || null;\n  };\n  const sendMessage = async messageData => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n\n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const markMessagesAsRead = async conversationId => {\n    if (!state.currentUser) return;\n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n  const addTrade = async tradeData => {\n    try {\n      const newTrade = await ApiService.createTrade(tradeData);\n      dispatch({\n        type: 'ADD_TRADE',\n        payload: newTrade\n      });\n    } catch (error) {\n      console.error('Error adding trade:', error);\n    }\n  };\n  const updateTrade = updatedTrade => {\n    const trade = {\n      ...updatedTrade,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateTrade(trade);\n    dispatch({\n      type: 'UPDATE_TRADE',\n      payload: trade\n    });\n  };\n  const value = {\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"JpwclWyOxcRvzhtE291B4vMY+pw=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","AuthService","DataService","ApiService","jsxDEV","_jsxDEV","initialState","currentUser","vehicles","listings","allListings","auctions","trades","messages","conversations","reviews","users","isAuthenticated","loading","error","appReducer","state","action","type","payload","map","v","id","filter","l","t","AppContext","undefined","AppProvider","children","_s","dispatch","activeTab","setActiveTab","useState","getCurrentUser","loadUserData","loadAllUsers","userId","getUserVehicles","vehiclesWithId","_id","userListings","getUserListings","userListingsWithId","console","getAllUsers","login","username","password","rememberMe","result","mongoUser","user","success","message","register","userData","logout","updateUser","log","addVehicle","vehicleData","newVehicle","createVehicle","updateVehicle","updatedVehicle","vehicle","deleteVehicle","vehicleId","addListing","listingData","newListing","createListing","find","isListed","listingId","updatedAt","Date","toISOString","updateListing","updatedListing","listing","deleteListing","renewListing","response","renewedListing","incrementListingViews","getListing","views","loadAllListings","getAllListings","listingsWithId","_l$vehicleId","_l$vehicleId2","_l$sellerId","_l$sellerId2","sellerId","seller","addReview","reviewData","createReview","getUserProfile","u","sendMessage","messageData","newMessage","markMessagesAsRead","conversationId","getUserMessages","addTrade","tradeData","newTrade","createTrade","updateTrade","updatedTrade","trade","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/thato/Downloads/car-app/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { AppState, User, Vehicle, Listing, Auction, Trade, Message, Conversation, Review, NavigationTab } from '../types/index.ts';\r\nimport { AuthService } from '../services/authService.ts';\r\nimport { DataService } from '../services/dataService.ts';\r\nimport ApiService from '../services/apiService.ts';\r\n\r\ninterface AppContextType {\r\n  state: AppState;\r\n  dispatch: React.Dispatch<AppAction>;\r\n  login: (username: string, password: string, rememberMe?: boolean) => Promise<{ success: boolean; error?: string }>;\r\n  register: (userData: Omit<User, 'id' | 'createdAt'>) => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => void;\r\n  updateUser: (user: User) => void;\r\n  addVehicle: (vehicle: {\r\n    make: string;\r\n    model: string;\r\n    year: number;\r\n    vin: string;\r\n    mileage: number;\r\n    transmission: 'manual' | 'automatic';\r\n    estimatedValue: number;\r\n    customPrice?: number;\r\n    images?: string[];\r\n  }) => Promise<void>;\r\n  updateVehicle: (vehicle: Vehicle) => Promise<void>;\r\n  deleteVehicle: (vehicleId: string) => Promise<void>;\r\n  addListing: (listing: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => Promise<void>;\r\n  updateListing: (listing: Listing) => Promise<void>;\r\n  deleteListing: (listingId: string) => Promise<void>;\r\n  renewListing: (listingId: string) => Promise<void>;\r\n  incrementListingViews: (listingId: string) => Promise<void>;\r\n  loadAllListings: () => Promise<void>;\r\n  addReview: (review: Omit<Review, 'id' | 'createdAt'>) => Promise<void>;\r\n  getUserProfile: (userId: string) => User | null;\r\n  sendMessage: (message: Omit<Message, 'id' | 'timestamp' | 'read'>) => Promise<void>;\r\n  markMessagesAsRead: (conversationId: string) => Promise<void>;\r\n  addTrade: (trade: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\r\n  updateTrade: (trade: Trade) => void;\r\n  activeTab: NavigationTab;\r\n  setActiveTab: (tab: NavigationTab) => void;\r\n}\r\n\r\ntype AppAction =\r\n  | { type: 'SET_USER'; payload: User | null }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_VEHICLES'; payload: Vehicle[] }\r\n  | { type: 'ADD_VEHICLE'; payload: Vehicle }\r\n  | { type: 'UPDATE_VEHICLE'; payload: Vehicle }\r\n  | { type: 'DELETE_VEHICLE'; payload: string }\r\n  | { type: 'SET_LISTINGS'; payload: Listing[] }\r\n  | { type: 'ADD_LISTING'; payload: Listing }\r\n  | { type: 'UPDATE_LISTING'; payload: Listing }\r\n  | { type: 'DELETE_LISTING'; payload: string }\r\n  | { type: 'SET_TRADES'; payload: Trade[] }\r\n  | { type: 'ADD_TRADE'; payload: Trade }\r\n  | { type: 'UPDATE_TRADE'; payload: Trade }\r\n  | { type: 'SET_MESSAGES'; payload: Message[] }\r\n  | { type: 'ADD_MESSAGE'; payload: Message }\r\n  | { type: 'SET_CONVERSATIONS'; payload: Conversation[] }\r\n  | { type: 'SET_REVIEWS'; payload: Review[] }\r\n  | { type: 'SET_USERS'; payload: User[] }\r\n  | { type: 'SET_ALL_LISTINGS'; payload: Listing[] }\r\n  | { type: 'SET_ACTIVE_TAB'; payload: NavigationTab };\r\n\r\nconst initialState: AppState = {\r\n  currentUser: null,\r\n  vehicles: [],\r\n  listings: [],\r\n  allListings: [],\r\n  auctions: [],\r\n  trades: [],\r\n  messages: [],\r\n  conversations: [],\r\n  reviews: [],\r\n  users: [],\r\n  isAuthenticated: false,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nfunction appReducer(state: AppState, action: AppAction): AppState {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        isAuthenticated: action.payload !== null,\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_VEHICLES':\r\n      return { ...state, vehicles: action.payload };\r\n    case 'ADD_VEHICLE':\r\n      return { ...state, vehicles: [...state.vehicles, action.payload] };\r\n    case 'UPDATE_VEHICLE':\r\n      return {\r\n        ...state,\r\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v),\r\n      };\r\n    case 'DELETE_VEHICLE':\r\n      return {\r\n        ...state,\r\n        vehicles: state.vehicles.filter(v => v.id !== action.payload),\r\n      };\r\n    case 'SET_LISTINGS':\r\n      return { ...state, listings: action.payload };\r\n    case 'ADD_LISTING':\r\n      return { ...state, listings: [...state.listings, action.payload] };\r\n    case 'UPDATE_LISTING':\r\n      return {\r\n        ...state,\r\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l),\r\n      };\r\n    case 'DELETE_LISTING':\r\n      return {\r\n        ...state,\r\n        listings: state.listings.filter(l => l.id !== action.payload),\r\n      };\r\n    case 'SET_TRADES':\r\n      return { ...state, trades: action.payload };\r\n    case 'ADD_TRADE':\r\n      return { ...state, trades: [...state.trades, action.payload] };\r\n    case 'UPDATE_TRADE':\r\n      return {\r\n        ...state,\r\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t),\r\n      };\r\n    case 'SET_MESSAGES':\r\n      return { ...state, messages: action.payload };\r\n    case 'ADD_MESSAGE':\r\n      return { ...state, messages: [...state.messages, action.payload] };\r\n    case 'SET_CONVERSATIONS':\r\n      return { ...state, conversations: action.payload };\r\n    case 'SET_REVIEWS':\r\n      return { ...state, reviews: action.payload };\r\n    case 'SET_USERS':\r\n      return { ...state, users: action.payload };\r\n    case 'SET_ALL_LISTINGS':\r\n      return { ...state, allListings: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\n\r\ninterface AppProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function AppProvider({ children }: AppProviderProps) {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const [activeTab, setActiveTab] = React.useState<NavigationTab>('garage');\r\n\r\n  useEffect(() => {\r\n    // Initialize app state\r\n    const currentUser = AuthService.getCurrentUser();\r\n    if (currentUser) {\r\n      dispatch({ type: 'SET_USER', payload: currentUser });\r\n      loadUserData(currentUser.id);\r\n    }\r\n    // Load all users for the seller profiles using API\r\n    loadAllUsers();\r\n  }, []);\r\n\r\n  const loadUserData = async (userId: string) => {\r\n    try {\r\n      // Load user's vehicles\r\n      const vehicles = await ApiService.getUserVehicles();\r\n      const vehiclesWithId = vehicles.map((v: any) => ({ ...v, id: v._id || v.id }));\r\n      dispatch({ type: 'SET_VEHICLES', payload: vehiclesWithId });\r\n\r\n      // Load user's listings (their own listings for garage management)\r\n      const userListings = await ApiService.getUserListings();\r\n      const userListingsWithId = userListings.map((l: any) => ({ ...l, id: l._id || l.id }));\r\n      dispatch({ type: 'SET_LISTINGS', payload: userListingsWithId });\r\n\r\n      // Don't automatically load all public listings - only load when user visits listings tab\r\n    } catch (error) {\r\n      console.error('Error loading user data:', error);\r\n    }\r\n  };\r\n\r\n  const loadAllUsers = async () => {\r\n    try {\r\n      const users = await ApiService.getAllUsers();\r\n      dispatch({ type: 'SET_USERS', payload: users });\r\n    } catch (error) {\r\n      console.error('Error loading users:', error);\r\n      // Fallback to empty array if API fails\r\n      dispatch({ type: 'SET_USERS', payload: [] });\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string, rememberMe: boolean = false) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    try {\r\n      const result = await ApiService.login(username, password);\r\n      // Convert MongoDB _id to id for frontend compatibility\r\n      const mongoUser = result.user as any;\r\n      const user = { ...mongoUser, id: mongoUser._id || mongoUser.id };\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      await loadUserData(user.id);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || 'Login failed' });\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: false, error: error.message || 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const register = async (userData: Omit<User, 'id' | 'createdAt'>) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    try {\r\n      const result = await ApiService.register(userData);\r\n      // Convert MongoDB _id to id for frontend compatibility\r\n      const mongoUser = result.user as any;\r\n      const user = { ...mongoUser, id: mongoUser._id || mongoUser.id };\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      await loadUserData(user.id);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || 'Registration failed' });\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { success: false, error: error.message || 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    ApiService.logout();\r\n    dispatch({ type: 'SET_USER', payload: null });\r\n    dispatch({ type: 'SET_VEHICLES', payload: [] });\r\n    dispatch({ type: 'SET_LISTINGS', payload: [] });\r\n    dispatch({ type: 'SET_TRADES', payload: [] });\r\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\r\n    dispatch({ type: 'SET_CONVERSATIONS', payload: [] });\r\n    setActiveTab('garage');\r\n  };\r\n\r\n  const updateUser = (user: User) => {\r\n    try {\r\n      console.log('Context updateUser called with:', user);\r\n      AuthService.updateUser(user);\r\n      dispatch({ type: 'SET_USER', payload: user });\r\n      console.log('User updated successfully in context');\r\n    } catch (error) {\r\n      console.error('Error in context updateUser:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const addVehicle = async (vehicleData: {\r\n    make: string;\r\n    model: string;\r\n    year: number;\r\n    vin: string;\r\n    mileage: number;\r\n    transmission: 'manual' | 'automatic';\r\n    estimatedValue: number;\r\n    customPrice?: number;\r\n    images?: string[];\r\n  }) => {\r\n    if (!state.currentUser) return;\r\n\r\n    try {\r\n      const newVehicle = await ApiService.createVehicle(vehicleData);\r\n      dispatch({ type: 'ADD_VEHICLE', payload: newVehicle });\r\n    } catch (error) {\r\n      console.error('Error adding vehicle:', error);\r\n    }\r\n  };\r\n\r\n  const updateVehicle = async (updatedVehicle: Vehicle) => {\r\n    try {\r\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\r\n      dispatch({ type: 'UPDATE_VEHICLE', payload: vehicle });\r\n    } catch (error) {\r\n      console.error('Error updating vehicle:', error);\r\n    }\r\n  };\r\n\r\n  const deleteVehicle = async (vehicleId: string) => {\r\n    try {\r\n      await ApiService.deleteVehicle(vehicleId);\r\n      dispatch({ type: 'DELETE_VEHICLE', payload: vehicleId });\r\n    } catch (error) {\r\n      console.error('Error deleting vehicle:', error);\r\n    }\r\n  };\r\n\r\n  const addListing = async (listingData: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => {\r\n    if (!state.currentUser) return;\r\n\r\n    try {\r\n      const newListing = await ApiService.createListing(listingData);\r\n      dispatch({ type: 'ADD_LISTING', payload: newListing });\r\n\r\n      // Update vehicle to mark as listed immediately in local state\r\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\r\n      if (vehicle) {\r\n        const updatedVehicle: Vehicle = {\r\n          ...vehicle,\r\n          isListed: true,\r\n          listingId: newListing.id,\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        // Update local state immediately\r\n        dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\r\n        // Then sync with backend\r\n        await updateVehicle(updatedVehicle);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding listing:', error);\r\n    }\r\n  };\r\n\r\n  const updateListing = async (updatedListing: Listing) => {\r\n    try {\r\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\r\n      dispatch({ type: 'UPDATE_LISTING', payload: listing });\r\n    } catch (error) {\r\n      console.error('Error updating listing:', error);\r\n    }\r\n  };\r\n\r\n  const deleteListing = async (listingId: string) => {\r\n    try {\r\n      const listing = state.listings.find(l => l.id === listingId);\r\n      \r\n      await ApiService.deleteListing(listingId);\r\n      dispatch({ type: 'DELETE_LISTING', payload: listingId });\r\n\r\n      // Update vehicle to remove listing status immediately in local state\r\n      if (listing) {\r\n        const vehicle = state.vehicles.find(v => v.id === listing.vehicleId);\r\n        if (vehicle) {\r\n          const updatedVehicle: Vehicle = {\r\n            ...vehicle,\r\n            isListed: false,\r\n            listingId: undefined,\r\n            updatedAt: new Date().toISOString(),\r\n          };\r\n          // Update local state immediately\r\n          dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\r\n          // Then sync with backend\r\n          await updateVehicle(updatedVehicle);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting listing:', error);\r\n    }\r\n  };\r\n\r\n  const renewListing = async (listingId: string) => {\r\n    try {\r\n      const response = await ApiService.renewListing(listingId);\r\n      const renewedListing = { ...response.listing, id: response.listing.id };\r\n      dispatch({ type: 'UPDATE_LISTING', payload: renewedListing });\r\n    } catch (error) {\r\n      console.error('Error renewing listing:', error);\r\n    }\r\n  };\r\n\r\n  const incrementListingViews = async (listingId: string) => {\r\n    try {\r\n      // The backend automatically increments views when getting a listing\r\n      await ApiService.getListing(listingId);\r\n      \r\n      // Update local state by incrementing views\r\n      const listing = state.listings.find(l => l.id === listingId);\r\n      if (listing) {\r\n        const updatedListing: Listing = {\r\n          ...listing,\r\n          views: listing.views + 1,\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        dispatch({ type: 'UPDATE_LISTING', payload: updatedListing });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error incrementing listing views:', error);\r\n    }\r\n  };\r\n\r\n  const loadAllListings = async () => {\r\n    try {\r\n      // Load all public listings from the API\r\n      const response = await ApiService.getAllListings();\r\n      const listingsWithId = response.listings.map((l: any) => ({ \r\n        ...l, \r\n        id: l._id || l.id,\r\n        vehicleId: l.vehicleId?._id || l.vehicleId?.id || l.vehicleId,\r\n        sellerId: l.sellerId?._id || l.sellerId?.id || l.sellerId,\r\n        // Include populated vehicle and seller data\r\n        vehicle: l.vehicleId && typeof l.vehicleId === 'object' ? { \r\n          ...l.vehicleId, \r\n          id: l.vehicleId._id || l.vehicleId.id \r\n        } : null,\r\n        seller: l.sellerId && typeof l.sellerId === 'object' ? { \r\n          ...l.sellerId, \r\n          id: l.sellerId._id || l.sellerId.id \r\n        } : null\r\n      }));\r\n      \r\n      dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsWithId });\r\n    } catch (error) {\r\n      console.error('Error loading all listings:', error);\r\n      // Fallback to empty array if API fails\r\n      dispatch({ type: 'SET_ALL_LISTINGS', payload: [] });\r\n    }\r\n  };\r\n\r\n  const addReview = async (reviewData: Omit<Review, 'id' | 'createdAt'>) => {\r\n    try {\r\n      const response = await ApiService.createReview(reviewData);\r\n      // Reload all data to update ratings\r\n      await loadAllListings();\r\n    } catch (error) {\r\n      console.error('Error adding review:', error);\r\n    }\r\n  };\r\n\r\n  const getUserProfile = (userId: string): User | null => {\r\n    return state.users.find(u => u.id === userId) || null;\r\n  };\r\n\r\n  const sendMessage = async (messageData: Omit<Message, 'id' | 'timestamp' | 'read'>) => {\r\n    try {\r\n      const newMessage = await ApiService.sendMessage(messageData);\r\n      dispatch({ type: 'ADD_MESSAGE', payload: newMessage });\r\n      \r\n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\r\n      // TODO: Implement getUserConversations in ApiService\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const markMessagesAsRead = async (conversationId: string) => {\r\n    if (!state.currentUser) return;\r\n    \r\n    try {\r\n      await ApiService.markMessagesAsRead(conversationId);\r\n      const messages = await ApiService.getUserMessages();\r\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\r\n      // TODO: Reload conversations when API method is available\r\n    } catch (error) {\r\n      console.error('Error marking messages as read:', error);\r\n    }\r\n  };\r\n\r\n  const addTrade = async (tradeData: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    try {\r\n      const newTrade = await ApiService.createTrade(tradeData);\r\n      dispatch({ type: 'ADD_TRADE', payload: newTrade });\r\n    } catch (error) {\r\n      console.error('Error adding trade:', error);\r\n    }\r\n  };\r\n\r\n  const updateTrade = (updatedTrade: Trade) => {\r\n    const trade = { ...updatedTrade, updatedAt: new Date().toISOString() };\r\n    DataService.updateTrade(trade);\r\n    dispatch({ type: 'UPDATE_TRADE', payload: trade });\r\n  };\r\n\r\n  const value: AppContextType = {\r\n    state,\r\n    dispatch,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    addVehicle,\r\n    updateVehicle,\r\n    deleteVehicle,\r\n    addListing,\r\n    updateListing,\r\n    deleteListing,\r\n    renewListing,\r\n    incrementListingViews,\r\n    loadAllListings,\r\n    addReview,\r\n    getUserProfile,\r\n    sendMessage,\r\n    markMessagesAsRead,\r\n    addTrade,\r\n    updateTrade,\r\n    activeTab,\r\n    setActiveTab,\r\n  };\r\n\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n}\r\n\r\nexport function useApp() {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}