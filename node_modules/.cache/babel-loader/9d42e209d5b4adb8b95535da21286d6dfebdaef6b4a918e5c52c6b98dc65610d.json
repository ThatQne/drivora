{"ast":null,"code":"// Comprehensive car database with realistic pricing\nconst CAR_DATABASE = [{\n  make: 'Acura',\n  models: ['ILX', 'TLX', 'RLX', 'MDX', 'RDX', 'NSX', 'Integra', 'ZDX'],\n  basePrice: 28000\n}, {\n  make: 'Alfa Romeo',\n  models: ['Giulia', 'Stelvio', '4C', 'Tonale'],\n  basePrice: 35000\n}, {\n  make: 'Aston Martin',\n  models: ['Vantage', 'DB11', 'DBS', 'DBX', 'Valkyrie'],\n  basePrice: 180000\n}, {\n  make: 'Audi',\n  models: ['A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'Q3', 'Q5', 'Q7', 'Q8', 'TT', 'R8', 'e-tron GT', 'RS3', 'RS4', 'RS5', 'RS6', 'RS7', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'SQ5', 'SQ7', 'SQ8'],\n  basePrice: 40000\n}, {\n  make: 'Bentley',\n  models: ['Continental', 'Flying Spur', 'Bentayga', 'Mulsanne'],\n  basePrice: 220000\n}, {\n  make: 'BMW',\n  models: ['1 Series', '2 Series', '3 Series', '4 Series', '5 Series', '6 Series', '7 Series', '8 Series', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'Z4', 'i3', 'i4', 'i7', 'i8', 'iX', 'M2', 'M3', 'M4', 'M5', 'M6', 'M8', 'X3 M', 'X4 M', 'X5 M', 'X6 M'],\n  basePrice: 45000\n}, {\n  make: 'Buick',\n  models: ['Encore', 'Encore GX', 'Envision', 'Enclave', 'Regal', 'LaCrosse'],\n  basePrice: 28000\n}, {\n  make: 'Cadillac',\n  models: ['ATS', 'CTS', 'CT4', 'CT5', 'CT6', 'XT4', 'XT5', 'XT6', 'Escalade', 'Lyriq', 'Celestiq'],\n  basePrice: 42000\n}, {\n  make: 'Chevrolet',\n  models: ['Spark', 'Sonic', 'Cruze', 'Malibu', 'Impala', 'Camaro', 'Corvette', 'Trax', 'Equinox', 'Blazer', 'Traverse', 'Tahoe', 'Suburban', 'Colorado', 'Silverado 1500', 'Silverado 2500HD', 'Silverado 3500HD', 'Bolt EV', 'Bolt EUV'],\n  basePrice: 32000\n}, {\n  make: 'Chrysler',\n  models: ['300', 'Pacifica', 'Voyager', 'Aspen'],\n  basePrice: 30000\n}, {\n  make: 'Dodge',\n  models: ['Charger', 'Challenger', 'Durango', 'Journey', 'Grand Caravan', 'Dart', 'Viper', 'Hornet'],\n  basePrice: 33000\n}, {\n  make: 'Ferrari',\n  models: ['488', 'F8', 'SF90', 'Roma', 'Portofino', 'LaFerrari', '812', 'F12', 'California', 'GTC4Lusso', 'Purosangue'],\n  basePrice: 280000\n}, {\n  make: 'Fiat',\n  models: ['500', '500X', '500L', '124 Spider'],\n  basePrice: 22000\n}, {\n  make: 'Ford',\n  models: ['Fiesta', 'Focus', 'Fusion', 'Mustang', 'Taurus', 'EcoSport', 'Escape', 'Edge', 'Explorer', 'Expedition', 'Ranger', 'F-150', 'F-250', 'F-350', 'F-450', 'Bronco', 'Bronco Sport', 'Maverick', 'Lightning', 'Mustang Mach-E', 'Transit'],\n  basePrice: 35000\n}, {\n  make: 'Genesis',\n  models: ['G70', 'G80', 'G90', 'GV60', 'GV70', 'GV80'],\n  basePrice: 48000\n}, {\n  make: 'GMC',\n  models: ['Terrain', 'Acadia', 'Yukon', 'Yukon XL', 'Canyon', 'Sierra 1500', 'Sierra 2500HD', 'Sierra 3500HD', 'Hummer EV'],\n  basePrice: 38000\n}, {\n  make: 'Honda',\n  models: ['Fit', 'Civic', 'Insight', 'Accord', 'CR-V', 'HR-V', 'Passport', 'Pilot', 'Ridgeline', 'Odyssey', 'Clarity'],\n  basePrice: 28000\n}, {\n  make: 'Hyundai',\n  models: ['Accent', 'Elantra', 'Sonata', 'Azera', 'Veloster', 'Venue', 'Kona', 'Tucson', 'Santa Fe', 'Santa Cruz', 'Palisade', 'Ioniq', 'Ioniq 5', 'Ioniq 6', 'Genesis'],\n  basePrice: 26000\n}, {\n  make: 'Infiniti',\n  models: ['Q50', 'Q60', 'Q70', 'QX30', 'QX50', 'QX60', 'QX80'],\n  basePrice: 38000\n}, {\n  make: 'Jaguar',\n  models: ['XE', 'XF', 'XJ', 'F-Type', 'E-Pace', 'F-Pace', 'I-Pace'],\n  basePrice: 45000\n}, {\n  make: 'Jeep',\n  models: ['Compass', 'Cherokee', 'Grand Cherokee', 'Wrangler', 'Gladiator', 'Renegade', 'Avenger', 'Grand Wagoneer', 'Wagoneer'],\n  basePrice: 35000\n}, {\n  make: 'Kia',\n  models: ['Rio', 'Forte', 'Optima', 'K5', 'Stinger', 'Soul', 'Seltos', 'Sportage', 'Sorento', 'Telluride', 'Carnival', 'Niro', 'EV6'],\n  basePrice: 25000\n}, {\n  make: 'Lamborghini',\n  models: ['Huracan', 'Aventador', 'Urus', 'Gallardo', 'Murcielago', 'Revuelto'],\n  basePrice: 250000\n}, {\n  make: 'Land Rover',\n  models: ['Discovery Sport', 'Discovery', 'Range Rover Evoque', 'Range Rover Velar', 'Range Rover Sport', 'Range Rover', 'Defender'],\n  basePrice: 55000\n}, {\n  make: 'Lexus',\n  models: ['IS', 'ES', 'GS', 'LS', 'RC', 'LC', 'UX', 'NX', 'RX', 'GX', 'LX', 'CT', 'RZ'],\n  basePrice: 42000\n}, {\n  make: 'Lincoln',\n  models: ['MKZ', 'Continental', 'Corsair', 'Nautilus', 'Aviator', 'Navigator'],\n  basePrice: 45000\n}, {\n  make: 'Lotus',\n  models: ['Evija', 'Emira', 'Elise', 'Exige', 'Evora'],\n  basePrice: 95000\n}, {\n  make: 'Maserati',\n  models: ['Ghibli', 'Quattroporte', 'Levante', 'GranTurismo', 'GranCabrio', 'MC20'],\n  basePrice: 85000\n}, {\n  make: 'Mazda',\n  models: ['Mazda3', 'Mazda6', 'MX-5 Miata', 'CX-3', 'CX-30', 'CX-5', 'CX-9', 'CX-50', 'CX-90'],\n  basePrice: 26000\n}, {\n  make: 'McLaren',\n  models: ['570S', '720S', '765LT', 'Artura', 'GT', 'Senna', 'P1'],\n  basePrice: 220000\n}, {\n  make: 'Mercedes-Benz',\n  models: ['A-Class', 'C-Class', 'E-Class', 'S-Class', 'CLA', 'CLS', 'SL', 'SLC', 'AMG GT', 'GLA', 'GLB', 'GLC', 'GLE', 'GLS', 'G-Class', 'EQC', 'EQS', 'EQE', 'EQA', 'EQB'],\n  basePrice: 48000\n}, {\n  make: 'Mini',\n  models: ['Cooper', 'Cooper Countryman', 'Cooper Clubman', 'Cooper Paceman'],\n  basePrice: 28000\n}, {\n  make: 'Mitsubishi',\n  models: ['Mirage', 'Lancer', 'Eclipse Cross', 'Outlander', 'Outlander Sport'],\n  basePrice: 24000\n}, {\n  make: 'Nissan',\n  models: ['Versa', 'Sentra', 'Altima', 'Maxima', '370Z', '400Z', 'GT-R', 'Kicks', 'Rogue', 'Murano', 'Pathfinder', 'Armada', 'Frontier', 'Titan', 'Leaf', 'Ariya'],\n  basePrice: 28000\n}, {\n  make: 'Polestar',\n  models: ['1', '2', '3', '4'],\n  basePrice: 48000\n}, {\n  make: 'Porsche',\n  models: ['718 Boxster', '718 Cayman', '911', 'Panamera', 'Macan', 'Cayenne', 'Taycan'],\n  basePrice: 75000\n}, {\n  make: 'Ram',\n  models: ['1500', '2500', '3500', 'ProMaster', 'ProMaster City'],\n  basePrice: 38000\n}, {\n  make: 'Rolls-Royce',\n  models: ['Ghost', 'Wraith', 'Dawn', 'Phantom', 'Cullinan', 'Spectre'],\n  basePrice: 350000\n}, {\n  make: 'Subaru',\n  models: ['Impreza', 'Legacy', 'Outback', 'Forester', 'Crosstrek', 'Ascent', 'WRX', 'BRZ'],\n  basePrice: 28000\n}, {\n  make: 'Tesla',\n  models: ['Model 3', 'Model Y', 'Model S', 'Model X', 'Cybertruck', 'Roadster'],\n  basePrice: 45000\n}, {\n  make: 'Toyota',\n  models: ['Yaris', 'Corolla', 'Camry', 'Avalon', 'Prius', 'C-HR', 'RAV4', 'Venza', 'Highlander', '4Runner', 'Sequoia', 'Land Cruiser', 'Tacoma', 'Tundra', 'Sienna', 'Supra', '86', 'bZ4X'],\n  basePrice: 30000\n}, {\n  make: 'Volkswagen',\n  models: ['Jetta', 'Passat', 'Arteon', 'Golf', 'GTI', 'Golf R', 'Beetle', 'Tiguan', 'Atlas', 'Atlas Cross Sport', 'ID.4'],\n  basePrice: 28000\n}, {\n  make: 'Volvo',\n  models: ['S60', 'S90', 'V60', 'V90', 'XC40', 'XC60', 'XC90', 'C40', 'EX30', 'EX90'],\n  basePrice: 42000\n}];\n\n// Condition multipliers\nconst CONDITION_MULTIPLIERS = {\n  excellent: 1.15,\n  good: 1.0,\n  fair: 0.85,\n  poor: 0.65\n};\n\n// Year depreciation (per year from 2024)\nconst YEAR_DEPRECIATION = 0.12; // 12% per year\n\n// Mileage impact (per 1000 miles over 12k/year average)\nconst MILEAGE_IMPACT = 0.0008; // 0.08% per 1000 miles\n\nexport class CarValuationService {\n  static getPopularMakes() {\n    return CAR_DATABASE.map(car => car.make).sort();\n  }\n  static getModelsForMake(make) {\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\n    return carData ? carData.models.sort() : [];\n  }\n  static async getValuation(make, model, year, mileage, condition) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\n    if (!carData) {\n      throw new Error('Make not found');\n    }\n    if (!carData.models.some(m => m.toLowerCase() === model.toLowerCase())) {\n      throw new Error('Model not found for this make');\n    }\n\n    // Calculate base price for the year\n    const currentYear = new Date().getFullYear();\n    const yearsOld = currentYear - year;\n    const yearFactor = Math.pow(1 - YEAR_DEPRECIATION, yearsOld);\n\n    // Calculate mileage impact\n    const expectedMileage = (currentYear - year) * 12000; // 12k miles per year\n    const excessMileage = Math.max(0, mileage - expectedMileage);\n    const mileageFactor = 1 - excessMileage / 1000 * MILEAGE_IMPACT;\n\n    // Apply condition multiplier\n    const conditionFactor = CONDITION_MULTIPLIERS[condition];\n\n    // Calculate final value\n    let estimatedValue = carData.basePrice * yearFactor * mileageFactor * conditionFactor;\n\n    // Add some luxury car premiums\n    if (['Ferrari', 'Lamborghini', 'McLaren', 'Rolls-Royce', 'Bentley', 'Aston Martin'].includes(make)) {\n      estimatedValue *= 1.2; // Luxury premium\n    }\n\n    // Electric car adjustments\n    if (['Tesla', 'Polestar'].includes(make) || ['Leaf', 'Bolt EV', 'Bolt EUV', 'Mustang Mach-E', 'Lightning', 'i3', 'i4', 'iX', 'EQC', 'EQS', 'EQE', 'Ioniq 5', 'Ioniq 6', 'EV6', 'ID.4', 'Taycan', 'e-tron GT'].includes(model)) {\n      if (yearsOld < 3) {\n        estimatedValue *= 1.1; // New EV premium\n      } else {\n        estimatedValue *= 0.9; // EV depreciation concern\n      }\n    }\n\n    // Ensure minimum value\n    estimatedValue = Math.max(estimatedValue, 1000);\n    const priceRange = {\n      low: Math.round(estimatedValue * 0.85),\n      high: Math.round(estimatedValue * 1.15)\n    };\n    return {\n      estimatedValue: Math.round(estimatedValue),\n      priceRange,\n      factors: {\n        year: Math.round(yearFactor * 100),\n        mileage: Math.round(mileageFactor * 100),\n        condition: Math.round(conditionFactor * 100)\n      }\n    };\n  }\n\n  // Get a quick estimate without full calculation\n  static getQuickEstimate(make, model, year) {\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\n    if (!carData) return 15000; // Default fallback\n\n    const currentYear = new Date().getFullYear();\n    const yearsOld = currentYear - year;\n    const yearFactor = Math.pow(1 - YEAR_DEPRECIATION, yearsOld);\n    return Math.round(carData.basePrice * yearFactor);\n  }\n}","map":{"version":3,"names":["CAR_DATABASE","make","models","basePrice","CONDITION_MULTIPLIERS","excellent","good","fair","poor","YEAR_DEPRECIATION","MILEAGE_IMPACT","CarValuationService","getPopularMakes","map","car","sort","getModelsForMake","carData","find","toLowerCase","getValuation","model","year","mileage","condition","Promise","resolve","setTimeout","Error","some","m","currentYear","Date","getFullYear","yearsOld","yearFactor","Math","pow","expectedMileage","excessMileage","max","mileageFactor","conditionFactor","estimatedValue","includes","priceRange","low","round","high","factors","getQuickEstimate"],"sources":["C:/Users/thato/Downloads/car-app/src/services/carValuationService.ts"],"sourcesContent":["import { CarValuation } from '../types/index.ts';\r\n\r\ninterface CarData {\r\n  make: string;\r\n  models: string[];\r\n  basePrice: number; // Base price for a 2020 model with average mileage\r\n}\r\n\r\ninterface ValuationResult {\r\n  estimatedValue: number;\r\n  priceRange: {\r\n    low: number;\r\n    high: number;\r\n  };\r\n  factors: {\r\n    year: number;\r\n    mileage: number;\r\n    condition: number;\r\n  };\r\n}\r\n\r\n// Comprehensive car database with realistic pricing\r\nconst CAR_DATABASE: CarData[] = [\r\n  { make: 'Acura', models: ['ILX', 'TLX', 'RLX', 'MDX', 'RDX', 'NSX', 'Integra', 'ZDX'], basePrice: 28000 },\r\n  { make: 'Alfa Romeo', models: ['Giulia', 'Stelvio', '4C', 'Tonale'], basePrice: 35000 },\r\n  { make: 'Aston Martin', models: ['Vantage', 'DB11', 'DBS', 'DBX', 'Valkyrie'], basePrice: 180000 },\r\n  { make: 'Audi', models: ['A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'Q3', 'Q5', 'Q7', 'Q8', 'TT', 'R8', 'e-tron GT', 'RS3', 'RS4', 'RS5', 'RS6', 'RS7', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'SQ5', 'SQ7', 'SQ8'], basePrice: 40000 },\r\n  { make: 'Bentley', models: ['Continental', 'Flying Spur', 'Bentayga', 'Mulsanne'], basePrice: 220000 },\r\n  { make: 'BMW', models: ['1 Series', '2 Series', '3 Series', '4 Series', '5 Series', '6 Series', '7 Series', '8 Series', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'Z4', 'i3', 'i4', 'i7', 'i8', 'iX', 'M2', 'M3', 'M4', 'M5', 'M6', 'M8', 'X3 M', 'X4 M', 'X5 M', 'X6 M'], basePrice: 45000 },\r\n  { make: 'Buick', models: ['Encore', 'Encore GX', 'Envision', 'Enclave', 'Regal', 'LaCrosse'], basePrice: 28000 },\r\n  { make: 'Cadillac', models: ['ATS', 'CTS', 'CT4', 'CT5', 'CT6', 'XT4', 'XT5', 'XT6', 'Escalade', 'Lyriq', 'Celestiq'], basePrice: 42000 },\r\n  { make: 'Chevrolet', models: ['Spark', 'Sonic', 'Cruze', 'Malibu', 'Impala', 'Camaro', 'Corvette', 'Trax', 'Equinox', 'Blazer', 'Traverse', 'Tahoe', 'Suburban', 'Colorado', 'Silverado 1500', 'Silverado 2500HD', 'Silverado 3500HD', 'Bolt EV', 'Bolt EUV'], basePrice: 32000 },\r\n  { make: 'Chrysler', models: ['300', 'Pacifica', 'Voyager', 'Aspen'], basePrice: 30000 },\r\n  { make: 'Dodge', models: ['Charger', 'Challenger', 'Durango', 'Journey', 'Grand Caravan', 'Dart', 'Viper', 'Hornet'], basePrice: 33000 },\r\n  { make: 'Ferrari', models: ['488', 'F8', 'SF90', 'Roma', 'Portofino', 'LaFerrari', '812', 'F12', 'California', 'GTC4Lusso', 'Purosangue'], basePrice: 280000 },\r\n  { make: 'Fiat', models: ['500', '500X', '500L', '124 Spider'], basePrice: 22000 },\r\n  { make: 'Ford', models: ['Fiesta', 'Focus', 'Fusion', 'Mustang', 'Taurus', 'EcoSport', 'Escape', 'Edge', 'Explorer', 'Expedition', 'Ranger', 'F-150', 'F-250', 'F-350', 'F-450', 'Bronco', 'Bronco Sport', 'Maverick', 'Lightning', 'Mustang Mach-E', 'Transit'], basePrice: 35000 },\r\n  { make: 'Genesis', models: ['G70', 'G80', 'G90', 'GV60', 'GV70', 'GV80'], basePrice: 48000 },\r\n  { make: 'GMC', models: ['Terrain', 'Acadia', 'Yukon', 'Yukon XL', 'Canyon', 'Sierra 1500', 'Sierra 2500HD', 'Sierra 3500HD', 'Hummer EV'], basePrice: 38000 },\r\n  { make: 'Honda', models: ['Fit', 'Civic', 'Insight', 'Accord', 'CR-V', 'HR-V', 'Passport', 'Pilot', 'Ridgeline', 'Odyssey', 'Clarity'], basePrice: 28000 },\r\n  { make: 'Hyundai', models: ['Accent', 'Elantra', 'Sonata', 'Azera', 'Veloster', 'Venue', 'Kona', 'Tucson', 'Santa Fe', 'Santa Cruz', 'Palisade', 'Ioniq', 'Ioniq 5', 'Ioniq 6', 'Genesis'], basePrice: 26000 },\r\n  { make: 'Infiniti', models: ['Q50', 'Q60', 'Q70', 'QX30', 'QX50', 'QX60', 'QX80'], basePrice: 38000 },\r\n  { make: 'Jaguar', models: ['XE', 'XF', 'XJ', 'F-Type', 'E-Pace', 'F-Pace', 'I-Pace'], basePrice: 45000 },\r\n  { make: 'Jeep', models: ['Compass', 'Cherokee', 'Grand Cherokee', 'Wrangler', 'Gladiator', 'Renegade', 'Avenger', 'Grand Wagoneer', 'Wagoneer'], basePrice: 35000 },\r\n  { make: 'Kia', models: ['Rio', 'Forte', 'Optima', 'K5', 'Stinger', 'Soul', 'Seltos', 'Sportage', 'Sorento', 'Telluride', 'Carnival', 'Niro', 'EV6'], basePrice: 25000 },\r\n  { make: 'Lamborghini', models: ['Huracan', 'Aventador', 'Urus', 'Gallardo', 'Murcielago', 'Revuelto'], basePrice: 250000 },\r\n  { make: 'Land Rover', models: ['Discovery Sport', 'Discovery', 'Range Rover Evoque', 'Range Rover Velar', 'Range Rover Sport', 'Range Rover', 'Defender'], basePrice: 55000 },\r\n  { make: 'Lexus', models: ['IS', 'ES', 'GS', 'LS', 'RC', 'LC', 'UX', 'NX', 'RX', 'GX', 'LX', 'CT', 'RZ'], basePrice: 42000 },\r\n  { make: 'Lincoln', models: ['MKZ', 'Continental', 'Corsair', 'Nautilus', 'Aviator', 'Navigator'], basePrice: 45000 },\r\n  { make: 'Lotus', models: ['Evija', 'Emira', 'Elise', 'Exige', 'Evora'], basePrice: 95000 },\r\n  { make: 'Maserati', models: ['Ghibli', 'Quattroporte', 'Levante', 'GranTurismo', 'GranCabrio', 'MC20'], basePrice: 85000 },\r\n  { make: 'Mazda', models: ['Mazda3', 'Mazda6', 'MX-5 Miata', 'CX-3', 'CX-30', 'CX-5', 'CX-9', 'CX-50', 'CX-90'], basePrice: 26000 },\r\n  { make: 'McLaren', models: ['570S', '720S', '765LT', 'Artura', 'GT', 'Senna', 'P1'], basePrice: 220000 },\r\n  { make: 'Mercedes-Benz', models: ['A-Class', 'C-Class', 'E-Class', 'S-Class', 'CLA', 'CLS', 'SL', 'SLC', 'AMG GT', 'GLA', 'GLB', 'GLC', 'GLE', 'GLS', 'G-Class', 'EQC', 'EQS', 'EQE', 'EQA', 'EQB'], basePrice: 48000 },\r\n  { make: 'Mini', models: ['Cooper', 'Cooper Countryman', 'Cooper Clubman', 'Cooper Paceman'], basePrice: 28000 },\r\n  { make: 'Mitsubishi', models: ['Mirage', 'Lancer', 'Eclipse Cross', 'Outlander', 'Outlander Sport'], basePrice: 24000 },\r\n  { make: 'Nissan', models: ['Versa', 'Sentra', 'Altima', 'Maxima', '370Z', '400Z', 'GT-R', 'Kicks', 'Rogue', 'Murano', 'Pathfinder', 'Armada', 'Frontier', 'Titan', 'Leaf', 'Ariya'], basePrice: 28000 },\r\n  { make: 'Polestar', models: ['1', '2', '3', '4'], basePrice: 48000 },\r\n  { make: 'Porsche', models: ['718 Boxster', '718 Cayman', '911', 'Panamera', 'Macan', 'Cayenne', 'Taycan'], basePrice: 75000 },\r\n  { make: 'Ram', models: ['1500', '2500', '3500', 'ProMaster', 'ProMaster City'], basePrice: 38000 },\r\n  { make: 'Rolls-Royce', models: ['Ghost', 'Wraith', 'Dawn', 'Phantom', 'Cullinan', 'Spectre'], basePrice: 350000 },\r\n  { make: 'Subaru', models: ['Impreza', 'Legacy', 'Outback', 'Forester', 'Crosstrek', 'Ascent', 'WRX', 'BRZ'], basePrice: 28000 },\r\n  { make: 'Tesla', models: ['Model 3', 'Model Y', 'Model S', 'Model X', 'Cybertruck', 'Roadster'], basePrice: 45000 },\r\n  { make: 'Toyota', models: ['Yaris', 'Corolla', 'Camry', 'Avalon', 'Prius', 'C-HR', 'RAV4', 'Venza', 'Highlander', '4Runner', 'Sequoia', 'Land Cruiser', 'Tacoma', 'Tundra', 'Sienna', 'Supra', '86', 'bZ4X'], basePrice: 30000 },\r\n  { make: 'Volkswagen', models: ['Jetta', 'Passat', 'Arteon', 'Golf', 'GTI', 'Golf R', 'Beetle', 'Tiguan', 'Atlas', 'Atlas Cross Sport', 'ID.4'], basePrice: 28000 },\r\n  { make: 'Volvo', models: ['S60', 'S90', 'V60', 'V90', 'XC40', 'XC60', 'XC90', 'C40', 'EX30', 'EX90'], basePrice: 42000 }\r\n];\r\n\r\n// Condition multipliers\r\nconst CONDITION_MULTIPLIERS = {\r\n  excellent: 1.15,\r\n  good: 1.0,\r\n  fair: 0.85,\r\n  poor: 0.65\r\n};\r\n\r\n// Year depreciation (per year from 2024)\r\nconst YEAR_DEPRECIATION = 0.12; // 12% per year\r\n\r\n// Mileage impact (per 1000 miles over 12k/year average)\r\nconst MILEAGE_IMPACT = 0.0008; // 0.08% per 1000 miles\r\n\r\nexport class CarValuationService {\r\n  static getPopularMakes(): string[] {\r\n    return CAR_DATABASE.map(car => car.make).sort();\r\n  }\r\n\r\n  static getModelsForMake(make: string): string[] {\r\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\r\n    return carData ? carData.models.sort() : [];\r\n  }\r\n\r\n  static async getValuation(\r\n    make: string,\r\n    model: string,\r\n    year: number,\r\n    mileage: number,\r\n    condition: 'excellent' | 'good' | 'fair' | 'poor'\r\n  ): Promise<ValuationResult> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\r\n    if (!carData) {\r\n      throw new Error('Make not found');\r\n    }\r\n\r\n    if (!carData.models.some(m => m.toLowerCase() === model.toLowerCase())) {\r\n      throw new Error('Model not found for this make');\r\n    }\r\n\r\n    // Calculate base price for the year\r\n    const currentYear = new Date().getFullYear();\r\n    const yearsOld = currentYear - year;\r\n    const yearFactor = Math.pow(1 - YEAR_DEPRECIATION, yearsOld);\r\n\r\n    // Calculate mileage impact\r\n    const expectedMileage = (currentYear - year) * 12000; // 12k miles per year\r\n    const excessMileage = Math.max(0, mileage - expectedMileage);\r\n    const mileageFactor = 1 - (excessMileage / 1000 * MILEAGE_IMPACT);\r\n\r\n    // Apply condition multiplier\r\n    const conditionFactor = CONDITION_MULTIPLIERS[condition];\r\n\r\n    // Calculate final value\r\n    let estimatedValue = carData.basePrice * yearFactor * mileageFactor * conditionFactor;\r\n\r\n    // Add some luxury car premiums\r\n    if (['Ferrari', 'Lamborghini', 'McLaren', 'Rolls-Royce', 'Bentley', 'Aston Martin'].includes(make)) {\r\n      estimatedValue *= 1.2; // Luxury premium\r\n    }\r\n\r\n    // Electric car adjustments\r\n    if (['Tesla', 'Polestar'].includes(make) || \r\n        ['Leaf', 'Bolt EV', 'Bolt EUV', 'Mustang Mach-E', 'Lightning', 'i3', 'i4', 'iX', 'EQC', 'EQS', 'EQE', 'Ioniq 5', 'Ioniq 6', 'EV6', 'ID.4', 'Taycan', 'e-tron GT'].includes(model)) {\r\n      if (yearsOld < 3) {\r\n        estimatedValue *= 1.1; // New EV premium\r\n      } else {\r\n        estimatedValue *= 0.9; // EV depreciation concern\r\n      }\r\n    }\r\n\r\n    // Ensure minimum value\r\n    estimatedValue = Math.max(estimatedValue, 1000);\r\n\r\n    const priceRange = {\r\n      low: Math.round(estimatedValue * 0.85),\r\n      high: Math.round(estimatedValue * 1.15)\r\n    };\r\n\r\n    return {\r\n      estimatedValue: Math.round(estimatedValue),\r\n      priceRange,\r\n      factors: {\r\n        year: Math.round(yearFactor * 100),\r\n        mileage: Math.round(mileageFactor * 100),\r\n        condition: Math.round(conditionFactor * 100)\r\n      }\r\n    };\r\n  }\r\n\r\n  // Get a quick estimate without full calculation\r\n  static getQuickEstimate(make: string, model: string, year: number): number {\r\n    const carData = CAR_DATABASE.find(car => car.make.toLowerCase() === make.toLowerCase());\r\n    if (!carData) return 15000; // Default fallback\r\n\r\n    const currentYear = new Date().getFullYear();\r\n    const yearsOld = currentYear - year;\r\n    const yearFactor = Math.pow(1 - YEAR_DEPRECIATION, yearsOld);\r\n\r\n    return Math.round(carData.basePrice * yearFactor);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}