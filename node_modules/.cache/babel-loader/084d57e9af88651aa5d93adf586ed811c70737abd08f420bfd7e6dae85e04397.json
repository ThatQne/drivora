{"ast":null,"code":"const STORAGE_KEY = 'carTrade_auth';\nconst USERS_KEY = 'carTrade_users';\nexport class AuthService {\n  static getCurrentUser() {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  }\n  static getUsers() {\n    try {\n      const stored = localStorage.getItem(USERS_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch {\n      return [];\n    }\n  }\n  static saveUsers(users) {\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  }\n  static async login(username, password, rememberMe = false) {\n    try {\n      const users = this.getUsers();\n      const user = users.find(u => u.username === username && u.password === password);\n      if (user) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(user));\n        if (rememberMe) {\n          localStorage.setItem('carTrade_remember', 'true');\n        }\n        return {\n          success: true,\n          user\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid username or password'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  }\n  static checkUsernameExists(username) {\n    const users = this.getUsers();\n    return users.some(u => u.username === username);\n  }\n  static getPasswordStrength(password) {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n    if (score === 0) return {\n      score,\n      text: 'Very Weak',\n      color: 'text-red-500'\n    };\n    if (score === 1) return {\n      score,\n      text: 'Weak',\n      color: 'text-red-400'\n    };\n    if (score === 2) return {\n      score,\n      text: 'Fair',\n      color: 'text-yellow-500'\n    };\n    if (score === 3) return {\n      score,\n      text: 'Good',\n      color: 'text-blue-400'\n    };\n    if (score === 4) return {\n      score,\n      text: 'Strong',\n      color: 'text-green-400'\n    };\n    return {\n      score,\n      text: 'Very Strong',\n      color: 'text-green-500'\n    };\n  }\n  static async register(userData) {\n    try {\n      const users = this.getUsers();\n\n      // Check if username already exists\n      if (users.some(u => u.username === userData.username)) {\n        return {\n          success: false,\n          error: 'Username already exists'\n        };\n      }\n\n      // Check if email already exists\n      if (users.some(u => u.email === userData.email)) {\n        return {\n          success: false,\n          error: 'Email already exists'\n        };\n      }\n      const newUser = {\n        ...userData,\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n        createdAt: new Date().toISOString()\n      };\n      users.push(newUser);\n      this.saveUsers(users);\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newUser));\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  }\n  static logout() {\n    localStorage.removeItem(STORAGE_KEY);\n  }\n  static isAuthenticated() {\n    return this.getCurrentUser() !== null;\n  }\n  static updateUser(updatedUser) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedUser));\n    const users = this.getUsers();\n    const userIndex = users.findIndex(u => u.id === updatedUser.id);\n    if (userIndex !== -1) {\n      users[userIndex] = updatedUser;\n      this.saveUsers(users);\n    }\n  }\n}","map":{"version":3,"names":["STORAGE_KEY","USERS_KEY","AuthService","getCurrentUser","stored","localStorage","getItem","JSON","parse","getUsers","saveUsers","users","setItem","stringify","login","username","password","rememberMe","user","find","u","success","error","checkUsernameExists","some","getPasswordStrength","score","length","test","text","color","register","userData","email","newUser","id","Date","now","toString","Math","random","substr","createdAt","toISOString","push","logout","removeItem","isAuthenticated","updateUser","updatedUser","userIndex","findIndex"],"sources":["C:/Users/thato/Downloads/car-app/src/services/authService.ts"],"sourcesContent":["import { User } from '../types/index.ts';\r\n\r\nconst STORAGE_KEY = 'carTrade_auth';\r\nconst USERS_KEY = 'carTrade_users';\r\n\r\nexport class AuthService {\r\n  static getCurrentUser(): User | null {\r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static getUsers(): User[] {\r\n    try {\r\n      const stored = localStorage.getItem(USERS_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static saveUsers(users: User[]): void {\r\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\r\n  }\r\n\r\n  static async login(username: string, password: string, rememberMe: boolean = false): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      const users = this.getUsers();\r\n      const user = users.find(u => u.username === username && u.password === password);\r\n      \r\n      if (user) {\r\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(user));\r\n        if (rememberMe) {\r\n          localStorage.setItem('carTrade_remember', 'true');\r\n        }\r\n        return { success: true, user };\r\n      } else {\r\n        return { success: false, error: 'Invalid username or password' };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  }\r\n\r\n  static checkUsernameExists(username: string): boolean {\r\n    const users = this.getUsers();\r\n    return users.some(u => u.username === username);\r\n  }\r\n\r\n  static getPasswordStrength(password: string): { score: number; text: string; color: string } {\r\n    let score = 0;\r\n    \r\n    if (password.length >= 8) score++;\r\n    if (/[a-z]/.test(password)) score++;\r\n    if (/[A-Z]/.test(password)) score++;\r\n    if (/[0-9]/.test(password)) score++;\r\n    if (/[^A-Za-z0-9]/.test(password)) score++;\r\n    \r\n    if (score === 0) return { score, text: 'Very Weak', color: 'text-red-500' };\r\n    if (score === 1) return { score, text: 'Weak', color: 'text-red-400' };\r\n    if (score === 2) return { score, text: 'Fair', color: 'text-yellow-500' };\r\n    if (score === 3) return { score, text: 'Good', color: 'text-blue-400' };\r\n    if (score === 4) return { score, text: 'Strong', color: 'text-green-400' };\r\n    return { score, text: 'Very Strong', color: 'text-green-500' };\r\n  }\r\n\r\n  static async register(userData: Omit<User, 'id' | 'createdAt'>): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      const users = this.getUsers();\r\n      \r\n      // Check if username already exists\r\n      if (users.some(u => u.username === userData.username)) {\r\n        return { success: false, error: 'Username already exists' };\r\n      }\r\n\r\n      // Check if email already exists\r\n      if (users.some(u => u.email === userData.email)) {\r\n        return { success: false, error: 'Email already exists' };\r\n      }\r\n\r\n      const newUser: User = {\r\n        ...userData,\r\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n\r\n      users.push(newUser);\r\n      this.saveUsers(users);\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newUser));\r\n      \r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Registration failed' };\r\n    }\r\n  }\r\n\r\n  static logout(): void {\r\n    localStorage.removeItem(STORAGE_KEY);\r\n  }\r\n\r\n  static isAuthenticated(): boolean {\r\n    return this.getCurrentUser() !== null;\r\n  }\r\n\r\n  static updateUser(updatedUser: User): void {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedUser));\r\n    \r\n    const users = this.getUsers();\r\n    const userIndex = users.findIndex(u => u.id === updatedUser.id);\r\n    if (userIndex !== -1) {\r\n      users[userIndex] = updatedUser;\r\n      this.saveUsers(users);\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}