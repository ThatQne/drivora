{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thato\\\\Downloads\\\\car-app\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState, useMemo, useCallback } from 'react';\nimport { AuthService } from '../services/authService.ts';\nimport ApiService from '../services/apiService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  sales: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null\n};\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        // Reset to initial state\n        isAuthenticated: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_VEHICLES':\n      return {\n        ...state,\n        vehicles: action.payload\n      };\n    case 'ADD_VEHICLE':\n      return {\n        ...state,\n        vehicles: [...state.vehicles, action.payload]\n      };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v)\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload)\n      };\n    case 'SET_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    case 'ADD_LISTING':\n      return {\n        ...state,\n        listings: [...state.listings, action.payload]\n      };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l)\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload)\n      };\n    case 'SET_TRADES':\n      return {\n        ...state,\n        trades: action.payload\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        trades: [...state.trades, action.payload]\n      };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_CONVERSATIONS':\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case 'SET_REVIEWS':\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_ALL_LISTINGS':\n      return {\n        ...state,\n        allListings: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState('garage');\n  const [listingsCache, setListingsCache] = useState({\n    data: [],\n    timestamp: 0,\n    ttl: 30000\n  }); // 30 second cache\n\n  // Add loading states to prevent duplicate calls\n  const [loadingStates, setLoadingStates] = useState({\n    userData: false,\n    users: false,\n    listings: false\n  });\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          return;\n        }\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = {\n            ...authCheck.user,\n            id: authCheck.user._id || authCheck.user.id\n          };\n          dispatch({\n            type: 'SET_CURRENT_USER',\n            payload: user\n          });\n          await loadUserData(user.id);\n        } else {\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n    };\n    initializeAuth();\n    // DON'T load all users on startup - load them when needed\n  }, []);\n  const loadUserData = async userId => {\n    // Prevent duplicate calls\n    if (loadingStates.userData) {\n      console.log('⏳ User data already loading, skipping duplicate call');\n      return;\n    }\n    setLoadingStates(prev => ({\n      ...prev,\n      userData: true\n    }));\n    try {\n      const [vehicles, listings, messages, trades] = await Promise.all([ApiService.getUserVehicles(), ApiService.getUserListings(), ApiService.getUserMessages(), ApiService.getUserTrades()]);\n      console.log('📊 Loaded trades from API:', trades.length);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const vehiclesWithId = vehicles.map(v => ({\n        ...v,\n        id: v._id || v.id\n      }));\n      const listingsWithId = listings.map(l => ({\n        ...l,\n        id: l._id || l.id\n      }));\n      const messagesWithId = messages.map(m => ({\n        ...m,\n        id: m._id || m.id\n      }));\n      const tradesWithId = trades.map(t => ({\n        ...t,\n        id: t._id || t.id\n      }));\n      dispatch({\n        type: 'SET_VEHICLES',\n        payload: vehiclesWithId\n      });\n      dispatch({\n        type: 'SET_LISTINGS',\n        payload: listingsWithId\n      });\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messagesWithId\n      });\n      dispatch({\n        type: 'SET_TRADES',\n        payload: tradesWithId\n      });\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoadingStates(prev => ({\n        ...prev,\n        userData: false\n      }));\n    }\n  };\n\n  // Add a function to force reload trades specifically\n  const reloadTrades = async () => {\n    try {\n      console.log('🔄 Force reloading trades...');\n      const trades = await ApiService.getUserTrades();\n      console.log('📊 Reloaded trades from API:', trades.length);\n      const tradesWithId = trades.map(t => ({\n        ...t,\n        id: t._id || t.id\n      }));\n      dispatch({\n        type: 'SET_TRADES',\n        payload: tradesWithId\n      });\n    } catch (error) {\n      console.error('Error reloading trades:', error);\n    }\n  };\n  const loadAllUsers = async () => {\n    // Prevent duplicate calls\n    if (loadingStates.users) {\n      console.log('⏳ Users already loading, skipping duplicate call');\n      return;\n    }\n    setLoadingStates(prev => ({\n      ...prev,\n      users: true\n    }));\n    try {\n      const users = await ApiService.getAllUsers();\n      const usersWithId = users.map(u => ({\n        ...u,\n        id: u._id || u.id\n      }));\n      dispatch({\n        type: 'SET_USERS',\n        payload: usersWithId\n      });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_USERS',\n        payload: []\n      });\n    } finally {\n      setLoadingStates(prev => ({\n        ...prev,\n        users: false\n      }));\n    }\n  };\n\n  // Lazy load specific users when needed\n  const loadUsersIfNeeded = useCallback(async userIds => {\n    const missingUserIds = userIds.filter(id => !state.users.find(u => u.id === id));\n    if (missingUserIds.length === 0) {\n      return; // All users already loaded\n    }\n\n    // Prevent duplicate calls\n    if (loadingStates.users) {\n      return;\n    }\n    setLoadingStates(prev => ({\n      ...prev,\n      users: true\n    }));\n    try {\n      // Use efficient batch endpoint for specific users\n      const users = await ApiService.getUsersBatch(missingUserIds);\n      const usersWithId = users.map(u => ({\n        ...u,\n        id: u._id || u.id\n      }));\n\n      // Merge with existing users\n      const updatedUsers = [...state.users, ...usersWithId];\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n    } catch (error) {\n      console.error('Error loading users batch:', error);\n      // Fallback to loading all users if batch fails\n      if (state.users.length === 0) {\n        await loadAllUsers();\n      }\n    } finally {\n      setLoadingStates(prev => ({\n        ...prev,\n        users: false\n      }));\n    }\n  }, [state.users, loadingStates.users]);\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh = false) => {\n    // Prevent duplicate calls\n    if (loadingStates.listings && !forceRefresh) {\n      return;\n    }\n    setLoadingStates(prev => ({\n      ...prev,\n      listings: true\n    }));\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && now - listingsCache.timestamp < listingsCache.ttl) {\n        dispatch({\n          type: 'SET_ALL_LISTINGS',\n          payload: listingsCache.data\n        });\n        return;\n      }\n\n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n\n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map(l => {\n        // Simple ID conversion only\n        const listing = {\n          ...l,\n          id: l._id || l.id,\n          vehicleId: l.vehicleId,\n          sellerId: l.sellerId\n        };\n\n        // Add populated data if it exists from backend aggregation\n        if (l.vehicle && typeof l.vehicle === 'object' && l.vehicle._id) {\n          listing.vehicle = {\n            ...l.vehicle,\n            id: l.vehicle._id || l.vehicle.id\n          };\n        }\n        if (l.seller && typeof l.seller === 'object' && l.seller._id) {\n          listing.seller = {\n            ...l.seller,\n            id: l.seller._id || l.seller.id\n          };\n        }\n        return listing;\n      });\n\n      // Extract unique seller IDs that need to be loaded\n      const sellerIds = [...new Set(listingsWithId.map(l => l.sellerId))];\n\n      // Only load users if we don't have them yet\n      await loadUsersIfNeeded(sellerIds);\n\n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: listingsWithId\n      });\n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: []\n      });\n    } finally {\n      setLoadingStates(prev => ({\n        ...prev,\n        listings: false\n      }));\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl, loadUsersIfNeeded, loadingStates.listings]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username, password, rememberMe = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  }, []);\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n\n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({\n      data: [],\n      timestamp: 0,\n      ttl: 30000\n    });\n  }, []);\n  const register = useCallback(async userData => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  }, []);\n  const updateUser = user => {\n    try {\n      AuthService.updateUser(user);\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n  const addVehicle = async vehicleData => {\n    if (!state.currentUser) return;\n    try {\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoVehicle = newVehicle;\n      const vehicleWithId = {\n        ...newVehicle,\n        id: mongoVehicle._id || newVehicle.id,\n        // Ensure boolean fields have default values\n        isListed: newVehicle.isListed || false,\n        isAuctioned: newVehicle.isAuctioned || false\n      };\n      dispatch({\n        type: 'ADD_VEHICLE',\n        payload: vehicleWithId\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n  const updateVehicle = async updatedVehicle => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({\n        type: 'UPDATE_VEHICLE',\n        payload: vehicle\n      });\n\n      // If the vehicle has an active listing, refresh all listings to ensure \n      // the listing shows the updated vehicle images\n      if (vehicle.isListed && vehicle.listingId) {\n        await loadAllListings(true);\n      }\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n  const deleteVehicle = async vehicleId => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({\n        type: 'DELETE_VEHICLE',\n        payload: vehicleId\n      });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n  const addListing = async listingData => {\n    if (!state.currentUser) return;\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing;\n      const listingWithId = {\n        ...newListing,\n        id: mongoListing._id || newListing.id\n      };\n      dispatch({\n        type: 'ADD_LISTING',\n        payload: listingWithId\n      });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString()\n        };\n        // Update local state immediately\n        dispatch({\n          type: 'UPDATE_VEHICLE',\n          payload: updatedVehicle\n        });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to ensure new listing appears immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n  const updateListing = async updatedListing => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: listing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n  const deleteListing = async listingId => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({\n        type: 'DELETE_LISTING',\n        payload: listingId\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n  const renewListing = async listingId => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = {\n        ...response.listing,\n        id: response.listing.id\n      };\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: renewedListing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to show updated renewal time\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n  const incrementListingViews = async listingId => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n\n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString()\n        };\n        dispatch({\n          type: 'UPDATE_LISTING',\n          payload: updatedListing\n        });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n  const addReview = async reviewData => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n  const getUserProfile = userId => {\n    // Try direct match first\n    let user = state.users.find(u => u.id === userId);\n\n    // If not found, try matching with MongoDB ObjectId format\n    if (!user) {\n      user = state.users.find(u => {\n        const uId = u._id || u.id;\n        return uId === userId;\n      });\n    }\n    return user || null;\n  };\n  const sendMessage = async messageData => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n\n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const markMessagesAsRead = async conversationId => {\n    if (!state.currentUser) return;\n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n  const addTrade = async tradeData => {\n    try {\n      const newTrade = await ApiService.createTrade(tradeData);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoTrade = newTrade;\n      const tradeWithId = {\n        ...newTrade,\n        id: mongoTrade._id || newTrade.id\n      };\n      dispatch({\n        type: 'ADD_TRADE',\n        payload: tradeWithId\n      });\n    } catch (error) {\n      console.error('❌ Error adding trade:', error);\n    }\n  };\n  const updateTrade = async updatedTrade => {\n    try {\n      // If trade is being cancelled, it gets deleted on the backend\n      if (updatedTrade.status === 'cancelled') {\n        const result = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n        // Remove the cancelled trade from state since backend deletes it\n        dispatch({\n          type: 'SET_TRADES',\n          payload: state.trades.filter(t => t.id !== updatedTrade.id)\n        });\n        console.log('✅ Cancelled trade removed from state');\n      } else {\n        const trade = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n        dispatch({\n          type: 'UPDATE_TRADE',\n          payload: trade\n        });\n      }\n    } catch (error) {\n      console.error('Error updating trade:', error);\n    }\n  };\n  const cleanupCorruptedTrades = async () => {\n    try {\n      const result = await ApiService.cleanupCorruptedTrades();\n      console.log('Cleanup result:', result);\n\n      // Reload trades to reflect the cleanup\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      return result;\n    } catch (error) {\n      console.error('Error cleaning up corrupted trades:', error);\n      throw error;\n    }\n  };\n  const loadUserMessages = async () => {\n    try {\n      const messages = await ApiService.getUserMessages();\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n    } catch (error) {\n      console.error('Error loading user messages:', error);\n    }\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    cleanupCorruptedTrades,\n    activeTab,\n    setActiveTab,\n    reloadTrades,\n    loadUserMessages\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, cleanupCorruptedTrades, activeTab, setActiveTab, reloadTrades, loadUserMessages]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 760,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"xuFaIdudz6zeuXIom5N3j/Dfc50=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","useMemo","useCallback","AuthService","ApiService","jsxDEV","_jsxDEV","initialState","currentUser","vehicles","listings","allListings","auctions","trades","messages","conversations","reviews","sales","users","isAuthenticated","loading","error","appReducer","state","action","type","payload","map","v","id","filter","l","t","AppContext","undefined","AppProvider","children","_s","dispatch","activeTab","setActiveTab","listingsCache","setListingsCache","data","timestamp","ttl","loadingStates","setLoadingStates","userData","initializeAuth","token","localStorage","getItem","authCheck","verifyToken","valid","user","_id","loadUserData","logout","userId","console","log","prev","Promise","all","getUserVehicles","getUserListings","getUserMessages","getUserTrades","length","vehiclesWithId","listingsWithId","messagesWithId","m","tradesWithId","reloadTrades","loadAllUsers","getAllUsers","usersWithId","u","loadUsersIfNeeded","userIds","missingUserIds","find","getUsersBatch","updatedUsers","loadAllListings","forceRefresh","now","Date","response","getAllListings","listing","vehicleId","sellerId","vehicle","seller","sellerIds","Set","login","username","password","rememberMe","success","message","removeItem","register","updateUser","addVehicle","vehicleData","newVehicle","createVehicle","mongoVehicle","vehicleWithId","isListed","isAuctioned","updateVehicle","updatedVehicle","listingId","deleteVehicle","addListing","listingData","newListing","createListing","mongoListing","listingWithId","updatedAt","toISOString","updateListing","updatedListing","deleteListing","renewListing","renewedListing","incrementListingViews","getListing","views","addReview","reviewData","createReview","getUserProfile","uId","sendMessage","messageData","newMessage","markMessagesAsRead","conversationId","addTrade","tradeData","newTrade","createTrade","mongoTrade","tradeWithId","updateTrade","updatedTrade","status","result","trade","cleanupCorruptedTrades","loadUserMessages","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/thato/Downloads/car-app/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode, useState, useMemo, useCallback } from 'react';\nimport { AppState, User, Vehicle, Listing, Auction, Trade, Message, Conversation, Review, NavigationTab } from '../types/index.ts';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\n\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  login: (username: string, password: string, rememberMe?: boolean) => Promise<{ success: boolean; error?: string }>;\n  register: (userData: Omit<User, 'id' | 'createdAt'>) => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n  updateUser: (user: User) => void;\n  addVehicle: (vehicle: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => Promise<void>;\n  updateVehicle: (vehicle: Vehicle) => Promise<void>;\n  deleteVehicle: (vehicleId: string) => Promise<void>;\n  addListing: (listing: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => Promise<void>;\n  updateListing: (listing: Listing) => Promise<void>;\n  deleteListing: (listingId: string) => Promise<void>;\n  renewListing: (listingId: string) => Promise<void>;\n  incrementListingViews: (listingId: string) => Promise<void>;\n  loadAllListings: (forceRefresh?: boolean) => Promise<void>;\n  addReview: (review: Omit<Review, 'id' | 'createdAt'>) => Promise<void>;\n  getUserProfile: (userId: string) => User | null;\n  sendMessage: (message: Omit<Message, 'id' | 'timestamp' | 'read'>) => Promise<void>;\n  markMessagesAsRead: (conversationId: string) => Promise<void>;\n  addTrade: (trade: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateTrade: (trade: Trade) => Promise<void>;\n  reloadTrades: () => Promise<void>;\n  cleanupCorruptedTrades: () => Promise<{ message: string; deletedCount: number; deletedTradeIds: string[] }>;\n  activeTab: NavigationTab;\n  setActiveTab: (tab: NavigationTab) => void;\n  loadUserMessages: () => Promise<void>;\n}\n\ntype AppAction = \n  | { type: 'SET_USER'; payload: User | null }\n  | { type: 'SET_CURRENT_USER'; payload: User }\n  | { type: 'LOGOUT' }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_VEHICLES'; payload: Vehicle[] }\n  | { type: 'ADD_VEHICLE'; payload: Vehicle }\n  | { type: 'UPDATE_VEHICLE'; payload: Vehicle }\n  | { type: 'DELETE_VEHICLE'; payload: string }\n  | { type: 'SET_LISTINGS'; payload: Listing[] }\n  | { type: 'SET_ALL_LISTINGS'; payload: Listing[] }\n  | { type: 'ADD_LISTING'; payload: Listing }\n  | { type: 'UPDATE_LISTING'; payload: Listing }\n  | { type: 'DELETE_LISTING'; payload: string }\n  | { type: 'SET_TRADES'; payload: Trade[] }\n  | { type: 'ADD_TRADE'; payload: Trade }\n  | { type: 'UPDATE_TRADE'; payload: Trade }\n  | { type: 'SET_MESSAGES'; payload: Message[] }\n  | { type: 'ADD_MESSAGE'; payload: Message }\n  | { type: 'SET_CONVERSATIONS'; payload: Conversation[] }\n  | { type: 'SET_REVIEWS'; payload: Review[] }\n  | { type: 'SET_USERS'; payload: User[] }\n  | { type: 'SET_ACTIVE_TAB'; payload: NavigationTab };\n\nconst initialState: AppState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  sales: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n};\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null,\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true,\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState, // Reset to initial state\n        isAuthenticated: false,\n      };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SET_VEHICLES':\n      return { ...state, vehicles: action.payload };\n    case 'ADD_VEHICLE':\n      return { ...state, vehicles: [...state.vehicles, action.payload] };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v),\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload),\n      };\n    case 'SET_LISTINGS':\n      return { ...state, listings: action.payload };\n    case 'ADD_LISTING':\n      return { ...state, listings: [...state.listings, action.payload] };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l),\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload),\n      };\n    case 'SET_TRADES':\n      return { ...state, trades: action.payload };\n    case 'ADD_TRADE':\n      return { ...state, trades: [...state.trades, action.payload] };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t),\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'ADD_MESSAGE':\n      return { ...state, messages: [...state.messages, action.payload] };\n    case 'SET_CONVERSATIONS':\n      return { ...state, conversations: action.payload };\n    case 'SET_REVIEWS':\n      return { ...state, reviews: action.payload };\n    case 'SET_USERS':\n      return { ...state, users: action.payload };\n    case 'SET_ALL_LISTINGS':\n      return { ...state, allListings: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport function AppProvider({ children }: AppProviderProps) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState<NavigationTab>('garage');\n  const [listingsCache, setListingsCache] = useState<{\n    data: any[];\n    timestamp: number;\n    ttl: number;\n  }>({ data: [], timestamp: 0, ttl: 30000 }); // 30 second cache\n  \n  // Add loading states to prevent duplicate calls\n  const [loadingStates, setLoadingStates] = useState<{\n    userData: boolean;\n    users: boolean;\n    listings: boolean;\n  }>({ userData: false, users: false, listings: false });\n\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          return;\n        }\n\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = { ...authCheck.user, id: (authCheck.user as any)._id || authCheck.user.id };\n          dispatch({ type: 'SET_CURRENT_USER', payload: user });\n          await loadUserData(user.id);\n        } else {\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({ type: 'LOGOUT' });\n      }\n    };\n\n    initializeAuth();\n    // DON'T load all users on startup - load them when needed\n  }, []);\n\n  const loadUserData = async (userId: string) => {\n    // Prevent duplicate calls\n    if (loadingStates.userData) {\n      console.log('⏳ User data already loading, skipping duplicate call');\n      return;\n    }\n\n    setLoadingStates(prev => ({ ...prev, userData: true }));\n    \n    try {\n      const [vehicles, listings, messages, trades] = await Promise.all([\n        ApiService.getUserVehicles(),\n        ApiService.getUserListings(),\n        ApiService.getUserMessages(),\n        ApiService.getUserTrades()\n      ]);\n\n      console.log('📊 Loaded trades from API:', trades.length);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const vehiclesWithId = vehicles.map((v: any) => ({ ...v, id: v._id || v.id }));\n      const listingsWithId = listings.map((l: any) => ({ ...l, id: l._id || l.id }));\n      const messagesWithId = messages.map((m: any) => ({ ...m, id: m._id || m.id }));\n      const tradesWithId = trades.map((t: any) => ({ ...t, id: t._id || t.id }));\n\n      dispatch({ type: 'SET_VEHICLES', payload: vehiclesWithId });\n      dispatch({ type: 'SET_LISTINGS', payload: listingsWithId });\n      dispatch({ type: 'SET_MESSAGES', payload: messagesWithId });\n      dispatch({ type: 'SET_TRADES', payload: tradesWithId });\n      \n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoadingStates(prev => ({ ...prev, userData: false }));\n    }\n  };\n\n  // Add a function to force reload trades specifically\n  const reloadTrades = async () => {\n    try {\n      console.log('🔄 Force reloading trades...');\n      const trades = await ApiService.getUserTrades();\n      console.log('📊 Reloaded trades from API:', trades.length);\n      \n      const tradesWithId = trades.map((t: any) => ({ ...t, id: t._id || t.id }));\n      dispatch({ type: 'SET_TRADES', payload: tradesWithId });\n    } catch (error) {\n      console.error('Error reloading trades:', error);\n    }\n  };\n\n  const loadAllUsers = async () => {\n    // Prevent duplicate calls\n    if (loadingStates.users) {\n      console.log('⏳ Users already loading, skipping duplicate call');\n      return;\n    }\n\n    setLoadingStates(prev => ({ ...prev, users: true }));\n    \n    try {\n      const users = await ApiService.getAllUsers();\n      const usersWithId = users.map((u: any) => ({ \n        ...u, \n        id: u._id || u.id \n      }));\n      dispatch({ type: 'SET_USERS', payload: usersWithId });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_USERS', payload: [] });\n    } finally {\n      setLoadingStates(prev => ({ ...prev, users: false }));\n    }\n  };\n\n  // Lazy load specific users when needed\n  const loadUsersIfNeeded = useCallback(async (userIds: string[]) => {\n    const missingUserIds = userIds.filter(id => !state.users.find(u => u.id === id));\n    \n    if (missingUserIds.length === 0) {\n      return; // All users already loaded\n    }\n\n    // Prevent duplicate calls\n    if (loadingStates.users) {\n      return;\n    }\n\n    setLoadingStates(prev => ({ ...prev, users: true }));\n\n    try {\n      // Use efficient batch endpoint for specific users\n      const users = await ApiService.getUsersBatch(missingUserIds);\n      const usersWithId = users.map((u: any) => ({ \n        ...u, \n        id: u._id || u.id \n      }));\n      \n      // Merge with existing users\n      const updatedUsers = [...state.users, ...usersWithId];\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\n    } catch (error) {\n      console.error('Error loading users batch:', error);\n      // Fallback to loading all users if batch fails\n      if (state.users.length === 0) {\n        await loadAllUsers();\n      }\n    } finally {\n      setLoadingStates(prev => ({ ...prev, users: false }));\n    }\n  }, [state.users, loadingStates.users]);\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh: boolean = false) => {\n    // Prevent duplicate calls\n    if (loadingStates.listings && !forceRefresh) {\n      return;\n    }\n\n    setLoadingStates(prev => ({ ...prev, listings: true }));\n\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && (now - listingsCache.timestamp) < listingsCache.ttl) {\n        dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsCache.data });\n        return;\n      }\n\n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      \n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map((l: any) => {\n        // Simple ID conversion only\n        const listing = {\n          ...l, \n          id: l._id || l.id,\n          vehicleId: l.vehicleId,\n          sellerId: l.sellerId,\n        };\n        \n        // Add populated data if it exists from backend aggregation\n        if (l.vehicle && typeof l.vehicle === 'object' && l.vehicle._id) {\n          listing.vehicle = { \n            ...l.vehicle, \n            id: l.vehicle._id || l.vehicle.id \n          };\n        }\n        \n        if (l.seller && typeof l.seller === 'object' && l.seller._id) {\n          listing.seller = { \n            ...l.seller, \n            id: l.seller._id || l.seller.id \n          };\n        }\n        \n        return listing;\n      });\n      \n      // Extract unique seller IDs that need to be loaded\n      const sellerIds = [...new Set(listingsWithId.map(l => l.sellerId))];\n      \n      // Only load users if we don't have them yet\n      await loadUsersIfNeeded(sellerIds);\n      \n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      \n      dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsWithId });\n      \n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_ALL_LISTINGS', payload: [] });\n    } finally {\n      setLoadingStates(prev => ({ ...prev, listings: false }));\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl, loadUsersIfNeeded, loadingStates.listings]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username: string, password: string, rememberMe: boolean = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message || 'Login failed' };\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n    \n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    \n    dispatch({ type: 'LOGOUT' });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({ data: [], timestamp: 0, ttl: 30000 });\n  }, []);\n\n  const register = useCallback(async (userData: Omit<User, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      return { success: false, error: error.message || 'Registration failed' };\n    }\n  }, []);\n\n  const updateUser = (user: User) => {\n    try {\n      AuthService.updateUser(user);\n      dispatch({ type: 'SET_USER', payload: user });\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n\n  const addVehicle = async (vehicleData: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => {\n    if (!state.currentUser) return;\n\n    try {\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      \n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoVehicle = newVehicle as any;\n      const vehicleWithId = { \n        ...newVehicle, \n        id: mongoVehicle._id || newVehicle.id,\n        // Ensure boolean fields have default values\n        isListed: newVehicle.isListed || false,\n        isAuctioned: newVehicle.isAuctioned || false\n      };\n      \n      dispatch({ type: 'ADD_VEHICLE', payload: vehicleWithId });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n\n  const updateVehicle = async (updatedVehicle: Vehicle) => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({ type: 'UPDATE_VEHICLE', payload: vehicle });\n      \n      // If the vehicle has an active listing, refresh all listings to ensure \n      // the listing shows the updated vehicle images\n      if (vehicle.isListed && vehicle.listingId) {\n        await loadAllListings(true);\n      }\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n\n  const deleteVehicle = async (vehicleId: string) => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({ type: 'DELETE_VEHICLE', payload: vehicleId });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n\n  const addListing = async (listingData: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views' | 'lastRenewed' | 'canRenewAfter'>) => {\n    if (!state.currentUser) return;\n\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing as any;\n      const listingWithId = { ...newListing, id: mongoListing._id || newListing.id };\n      dispatch({ type: 'ADD_LISTING', payload: listingWithId });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle: Vehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString(),\n        };\n        // Update local state immediately\n        dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to ensure new listing appears immediately\n      await loadAllListings(true);\n      \n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n\n  const updateListing = async (updatedListing: Listing) => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({ type: 'UPDATE_LISTING', payload: listing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n\n  const deleteListing = async (listingId: string) => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({ type: 'DELETE_LISTING', payload: listingId });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n\n  const renewListing = async (listingId: string) => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = { ...response.listing, id: response.listing.id };\n      dispatch({ type: 'UPDATE_LISTING', payload: renewedListing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to show updated renewal time\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n\n  const incrementListingViews = async (listingId: string) => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n      \n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing: Listing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString(),\n        };\n        dispatch({ type: 'UPDATE_LISTING', payload: updatedListing });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n\n  const addReview = async (reviewData: Omit<Review, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n\n  const getUserProfile = (userId: string): User | null => {\n    // Try direct match first\n    let user = state.users.find(u => u.id === userId);\n    \n    // If not found, try matching with MongoDB ObjectId format\n    if (!user) {\n      user = state.users.find(u => {\n        const uId = (u as any)._id || u.id;\n        return uId === userId;\n      });\n    }\n    \n    return user || null;\n  };\n\n  const sendMessage = async (messageData: Omit<Message, 'id' | 'timestamp' | 'read'>) => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({ type: 'ADD_MESSAGE', payload: newMessage });\n      \n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const markMessagesAsRead = async (conversationId: string) => {\n    if (!state.currentUser) return;\n    \n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const addTrade = async (tradeData: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      const newTrade = await ApiService.createTrade(tradeData);\n      \n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoTrade = newTrade as any;\n      const tradeWithId = { ...newTrade, id: mongoTrade._id || newTrade.id };\n      \n      dispatch({ type: 'ADD_TRADE', payload: tradeWithId });\n    } catch (error) {\n      console.error('❌ Error adding trade:', error);\n    }\n  };\n\n  const updateTrade = async (updatedTrade: Trade) => {\n    try {\n      // If trade is being cancelled, it gets deleted on the backend\n      if (updatedTrade.status === 'cancelled') {\n        const result = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n        // Remove the cancelled trade from state since backend deletes it\n        dispatch({ type: 'SET_TRADES', payload: state.trades.filter(t => t.id !== updatedTrade.id) });\n        console.log('✅ Cancelled trade removed from state');\n      } else {\n        const trade = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n        dispatch({ type: 'UPDATE_TRADE', payload: trade });\n      }\n    } catch (error) {\n      console.error('Error updating trade:', error);\n    }\n  };\n\n  const cleanupCorruptedTrades = async () => {\n    try {\n      const result = await ApiService.cleanupCorruptedTrades();\n      console.log('Cleanup result:', result);\n      \n      // Reload trades to reflect the cleanup\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Error cleaning up corrupted trades:', error);\n      throw error;\n    }\n  };\n\n  const loadUserMessages = async () => {\n    try {\n      const messages = await ApiService.getUserMessages();\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\n    } catch (error) {\n      console.error('Error loading user messages:', error);\n    }\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    cleanupCorruptedTrades,\n    activeTab,\n    setActiveTab,\n    reloadTrades,\n    loadUserMessages,\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, cleanupCorruptedTrades, activeTab, setActiveTab, reloadTrades, loadUserMessages]);\n\n  return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}