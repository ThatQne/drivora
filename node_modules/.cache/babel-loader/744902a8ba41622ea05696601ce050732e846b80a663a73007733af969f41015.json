{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thato\\\\Downloads\\\\car-app\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState, useMemo, useCallback } from 'react';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null\n};\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        // Reset to initial state\n        isAuthenticated: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_VEHICLES':\n      return {\n        ...state,\n        vehicles: action.payload\n      };\n    case 'ADD_VEHICLE':\n      return {\n        ...state,\n        vehicles: [...state.vehicles, action.payload]\n      };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v)\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload)\n      };\n    case 'SET_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    case 'ADD_LISTING':\n      return {\n        ...state,\n        listings: [...state.listings, action.payload]\n      };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l)\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload)\n      };\n    case 'SET_TRADES':\n      return {\n        ...state,\n        trades: action.payload\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        trades: [...state.trades, action.payload]\n      };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_CONVERSATIONS':\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case 'SET_REVIEWS':\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_ALL_LISTINGS':\n      return {\n        ...state,\n        allListings: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState('garage');\n  const [listingsCache, setListingsCache] = useState({\n    data: [],\n    timestamp: 0,\n    ttl: 30000\n  }); // 30 second cache\n\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          console.log('No token found, user not authenticated');\n          return;\n        }\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = {\n            ...authCheck.user,\n            id: authCheck.user._id || authCheck.user.id\n          };\n          dispatch({\n            type: 'SET_CURRENT_USER',\n            payload: user\n          });\n          await loadUserData(user.id);\n          console.log('User authenticated and data loaded');\n        } else {\n          console.log('Token invalid, clearing authentication');\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        console.log('Authentication check failed:', error);\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n    };\n    initializeAuth();\n    // Load all users for the seller profiles using API\n    loadAllUsers();\n  }, []);\n  const loadUserData = async userId => {\n    try {\n      // Load user's vehicles\n      const vehicles = await ApiService.getUserVehicles();\n      const vehiclesWithId = vehicles.map(v => ({\n        ...v,\n        id: v._id || v.id,\n        // Ensure listing status fields are properly mapped\n        isListed: v.isListed || false,\n        isAuctioned: v.isAuctioned || false,\n        listingId: v.listingId || null,\n        auctionId: v.auctionId || null\n      }));\n      dispatch({\n        type: 'SET_VEHICLES',\n        payload: vehiclesWithId\n      });\n\n      // Load user's listings (their own listings for garage management)\n      const userListings = await ApiService.getUserListings();\n      const userListingsWithId = userListings.map(l => {\n        var _l$vehicleId, _l$vehicleId2, _l$sellerId, _l$sellerId2;\n        return {\n          ...l,\n          id: l._id || l.id,\n          vehicleId: ((_l$vehicleId = l.vehicleId) === null || _l$vehicleId === void 0 ? void 0 : _l$vehicleId._id) || ((_l$vehicleId2 = l.vehicleId) === null || _l$vehicleId2 === void 0 ? void 0 : _l$vehicleId2.id) || l.vehicleId,\n          sellerId: ((_l$sellerId = l.sellerId) === null || _l$sellerId === void 0 ? void 0 : _l$sellerId._id) || ((_l$sellerId2 = l.sellerId) === null || _l$sellerId2 === void 0 ? void 0 : _l$sellerId2.id) || l.sellerId\n        };\n      });\n      dispatch({\n        type: 'SET_LISTINGS',\n        payload: userListingsWithId\n      });\n      console.log('Loaded vehicles with status:', vehiclesWithId);\n      console.log('Loaded user listings:', userListingsWithId);\n\n      // Don't automatically load all public listings - only load when user visits listings tab\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    }\n  };\n  const loadAllUsers = async () => {\n    try {\n      const users = await ApiService.getAllUsers();\n      dispatch({\n        type: 'SET_USERS',\n        payload: users\n      });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_USERS',\n        payload: []\n      });\n    }\n  };\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh = false) => {\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && now - listingsCache.timestamp < listingsCache.ttl) {\n        console.log('Using cached listings data');\n        dispatch({\n          type: 'SET_ALL_LISTINGS',\n          payload: listingsCache.data\n        });\n        return;\n      }\n      console.time('loadAllListings');\n      console.time('API call');\n\n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      console.timeEnd('API call');\n      console.log('Raw API response:', response);\n      console.time('Data processing');\n\n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map(l => {\n        var _l$vehicleId3, _l$vehicleId4, _l$sellerId3, _l$sellerId4;\n        // Simple ID conversion only\n        const listing = {\n          ...l,\n          id: l._id || l.id,\n          vehicleId: ((_l$vehicleId3 = l.vehicleId) === null || _l$vehicleId3 === void 0 ? void 0 : _l$vehicleId3._id) || ((_l$vehicleId4 = l.vehicleId) === null || _l$vehicleId4 === void 0 ? void 0 : _l$vehicleId4.id) || l.vehicleId,\n          sellerId: ((_l$sellerId3 = l.sellerId) === null || _l$sellerId3 === void 0 ? void 0 : _l$sellerId3._id) || ((_l$sellerId4 = l.sellerId) === null || _l$sellerId4 === void 0 ? void 0 : _l$sellerId4.id) || l.sellerId\n        };\n\n        // Only add populated data if it exists (avoid creating empty objects)\n        if (l.vehicleId && typeof l.vehicleId === 'object' && l.vehicleId._id) {\n          listing.vehicle = {\n            ...l.vehicleId,\n            id: l.vehicleId._id || l.vehicleId.id\n          };\n        }\n        if (l.sellerId && typeof l.sellerId === 'object' && l.sellerId._id) {\n          listing.seller = {\n            ...l.sellerId,\n            id: l.sellerId._id || l.sellerId.id\n          };\n        }\n        return listing;\n      });\n      console.timeEnd('Data processing');\n      console.log('Processed listings count:', listingsWithId.length);\n\n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: listingsWithId\n      });\n      console.timeEnd('loadAllListings');\n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: []\n      });\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username, password, rememberMe = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  }, []);\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n\n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({\n      data: [],\n      timestamp: 0,\n      ttl: 30000\n    });\n    console.log('Logout completed - all tokens and data cleared');\n  }, []);\n  const register = useCallback(async userData => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  }, []);\n  const updateUser = user => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n  const addVehicle = async vehicleData => {\n    if (!state.currentUser) return;\n    try {\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      dispatch({\n        type: 'ADD_VEHICLE',\n        payload: newVehicle\n      });\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n  const updateVehicle = async updatedVehicle => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({\n        type: 'UPDATE_VEHICLE',\n        payload: vehicle\n      });\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n  const deleteVehicle = async vehicleId => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({\n        type: 'DELETE_VEHICLE',\n        payload: vehicleId\n      });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n  const addListing = async listingData => {\n    if (!state.currentUser) return;\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing;\n      const listingWithId = {\n        ...newListing,\n        id: mongoListing._id || newListing.id\n      };\n      dispatch({\n        type: 'ADD_LISTING',\n        payload: listingWithId\n      });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString()\n        };\n        // Update local state immediately\n        dispatch({\n          type: 'UPDATE_VEHICLE',\n          payload: updatedVehicle\n        });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n  const updateListing = async updatedListing => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: listing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n  const deleteListing = async listingId => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({\n        type: 'DELETE_LISTING',\n        payload: listingId\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n  const renewListing = async listingId => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = {\n        ...response.listing,\n        id: response.listing.id\n      };\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: renewedListing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n  const incrementListingViews = async listingId => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n\n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString()\n        };\n        dispatch({\n          type: 'UPDATE_LISTING',\n          payload: updatedListing\n        });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n  const addReview = async reviewData => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n  const getUserProfile = userId => {\n    return state.users.find(u => u.id === userId) || null;\n  };\n  const sendMessage = async messageData => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n\n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const markMessagesAsRead = async conversationId => {\n    if (!state.currentUser) return;\n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n  const addTrade = async tradeData => {\n    try {\n      const newTrade = await ApiService.createTrade(tradeData);\n      dispatch({\n        type: 'ADD_TRADE',\n        payload: newTrade\n      });\n    } catch (error) {\n      console.error('Error adding trade:', error);\n    }\n  };\n  const updateTrade = updatedTrade => {\n    const trade = {\n      ...updatedTrade,\n      updatedAt: new Date().toISOString()\n    };\n    DataService.updateTrade(trade);\n    dispatch({\n      type: 'UPDATE_TRADE',\n      payload: trade\n    });\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, activeTab, setActiveTab]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"Cp54A8QDW415lIvb0Bpjq0X1Go4=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","useMemo","useCallback","AuthService","DataService","ApiService","jsxDEV","_jsxDEV","initialState","currentUser","vehicles","listings","allListings","auctions","trades","messages","conversations","reviews","users","isAuthenticated","loading","error","appReducer","state","action","type","payload","map","v","id","filter","l","t","AppContext","undefined","AppProvider","children","_s","dispatch","activeTab","setActiveTab","listingsCache","setListingsCache","data","timestamp","ttl","initializeAuth","token","localStorage","getItem","console","log","authCheck","verifyToken","valid","user","_id","loadUserData","logout","loadAllUsers","userId","getUserVehicles","vehiclesWithId","isListed","isAuctioned","listingId","auctionId","userListings","getUserListings","userListingsWithId","_l$vehicleId","_l$vehicleId2","_l$sellerId","_l$sellerId2","vehicleId","sellerId","getAllUsers","loadAllListings","forceRefresh","now","Date","length","time","response","getAllListings","timeEnd","listingsWithId","_l$vehicleId3","_l$vehicleId4","_l$sellerId3","_l$sellerId4","listing","vehicle","seller","login","username","password","rememberMe","success","message","removeItem","register","userData","updateUser","addVehicle","vehicleData","newVehicle","createVehicle","updateVehicle","updatedVehicle","deleteVehicle","addListing","listingData","newListing","createListing","mongoListing","listingWithId","find","updatedAt","toISOString","updateListing","updatedListing","deleteListing","renewListing","renewedListing","incrementListingViews","getListing","views","addReview","reviewData","createReview","getUserProfile","u","sendMessage","messageData","newMessage","markMessagesAsRead","conversationId","getUserMessages","addTrade","tradeData","newTrade","createTrade","updateTrade","updatedTrade","trade","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/thato/Downloads/car-app/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode, useState, useMemo, useCallback } from 'react';\nimport { AppState, User, Vehicle, Listing, Auction, Trade, Message, Conversation, Review, NavigationTab } from '../types/index.ts';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\n\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  login: (username: string, password: string, rememberMe?: boolean) => Promise<{ success: boolean; error?: string }>;\n  register: (userData: Omit<User, 'id' | 'createdAt'>) => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n  updateUser: (user: User) => void;\n  addVehicle: (vehicle: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => Promise<void>;\n  updateVehicle: (vehicle: Vehicle) => Promise<void>;\n  deleteVehicle: (vehicleId: string) => Promise<void>;\n  addListing: (listing: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => Promise<void>;\n  updateListing: (listing: Listing) => Promise<void>;\n  deleteListing: (listingId: string) => Promise<void>;\n  renewListing: (listingId: string) => Promise<void>;\n  incrementListingViews: (listingId: string) => Promise<void>;\n  loadAllListings: (forceRefresh?: boolean) => Promise<void>;\n  addReview: (review: Omit<Review, 'id' | 'createdAt'>) => Promise<void>;\n  getUserProfile: (userId: string) => User | null;\n  sendMessage: (message: Omit<Message, 'id' | 'timestamp' | 'read'>) => Promise<void>;\n  markMessagesAsRead: (conversationId: string) => Promise<void>;\n  addTrade: (trade: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateTrade: (trade: Trade) => void;\n  activeTab: NavigationTab;\n  setActiveTab: (tab: NavigationTab) => void;\n}\n\ntype AppAction = \n  | { type: 'SET_USER'; payload: User | null }\n  | { type: 'SET_CURRENT_USER'; payload: User }\n  | { type: 'LOGOUT' }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_VEHICLES'; payload: Vehicle[] }\n  | { type: 'ADD_VEHICLE'; payload: Vehicle }\n  | { type: 'UPDATE_VEHICLE'; payload: Vehicle }\n  | { type: 'DELETE_VEHICLE'; payload: string }\n  | { type: 'SET_LISTINGS'; payload: Listing[] }\n  | { type: 'SET_ALL_LISTINGS'; payload: Listing[] }\n  | { type: 'ADD_LISTING'; payload: Listing }\n  | { type: 'UPDATE_LISTING'; payload: Listing }\n  | { type: 'DELETE_LISTING'; payload: string }\n  | { type: 'SET_TRADES'; payload: Trade[] }\n  | { type: 'ADD_TRADE'; payload: Trade }\n  | { type: 'UPDATE_TRADE'; payload: Trade }\n  | { type: 'SET_MESSAGES'; payload: Message[] }\n  | { type: 'ADD_MESSAGE'; payload: Message }\n  | { type: 'SET_CONVERSATIONS'; payload: Conversation[] }\n  | { type: 'SET_REVIEWS'; payload: Review[] }\n  | { type: 'SET_USERS'; payload: User[] }\n  | { type: 'SET_ACTIVE_TAB'; payload: NavigationTab };\n\nconst initialState: AppState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n};\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null,\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true,\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState, // Reset to initial state\n        isAuthenticated: false,\n      };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SET_VEHICLES':\n      return { ...state, vehicles: action.payload };\n    case 'ADD_VEHICLE':\n      return { ...state, vehicles: [...state.vehicles, action.payload] };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v),\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload),\n      };\n    case 'SET_LISTINGS':\n      return { ...state, listings: action.payload };\n    case 'ADD_LISTING':\n      return { ...state, listings: [...state.listings, action.payload] };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l),\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload),\n      };\n    case 'SET_TRADES':\n      return { ...state, trades: action.payload };\n    case 'ADD_TRADE':\n      return { ...state, trades: [...state.trades, action.payload] };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t),\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'ADD_MESSAGE':\n      return { ...state, messages: [...state.messages, action.payload] };\n    case 'SET_CONVERSATIONS':\n      return { ...state, conversations: action.payload };\n    case 'SET_REVIEWS':\n      return { ...state, reviews: action.payload };\n    case 'SET_USERS':\n      return { ...state, users: action.payload };\n    case 'SET_ALL_LISTINGS':\n      return { ...state, allListings: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport function AppProvider({ children }: AppProviderProps) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState<NavigationTab>('garage');\n  const [listingsCache, setListingsCache] = useState<{\n    data: any[];\n    timestamp: number;\n    ttl: number;\n  }>({ data: [], timestamp: 0, ttl: 30000 }); // 30 second cache\n\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          console.log('No token found, user not authenticated');\n          return;\n        }\n\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = { ...authCheck.user, id: (authCheck.user as any)._id || authCheck.user.id };\n          dispatch({ type: 'SET_CURRENT_USER', payload: user });\n          await loadUserData(user.id);\n          console.log('User authenticated and data loaded');\n        } else {\n          console.log('Token invalid, clearing authentication');\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        console.log('Authentication check failed:', error);\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({ type: 'LOGOUT' });\n      }\n    };\n\n    initializeAuth();\n    // Load all users for the seller profiles using API\n    loadAllUsers();\n  }, []);\n\n  const loadUserData = async (userId: string) => {\n    try {\n      // Load user's vehicles\n      const vehicles = await ApiService.getUserVehicles();\n      const vehiclesWithId = vehicles.map((v: any) => ({ \n        ...v, \n        id: v._id || v.id,\n        // Ensure listing status fields are properly mapped\n        isListed: v.isListed || false,\n        isAuctioned: v.isAuctioned || false,\n        listingId: v.listingId || null,\n        auctionId: v.auctionId || null\n      }));\n      dispatch({ type: 'SET_VEHICLES', payload: vehiclesWithId });\n\n      // Load user's listings (their own listings for garage management)\n      const userListings = await ApiService.getUserListings();\n      const userListingsWithId = userListings.map((l: any) => ({ \n        ...l, \n        id: l._id || l.id,\n        vehicleId: l.vehicleId?._id || l.vehicleId?.id || l.vehicleId,\n        sellerId: l.sellerId?._id || l.sellerId?.id || l.sellerId\n      }));\n      dispatch({ type: 'SET_LISTINGS', payload: userListingsWithId });\n\n      console.log('Loaded vehicles with status:', vehiclesWithId);\n      console.log('Loaded user listings:', userListingsWithId);\n\n      // Don't automatically load all public listings - only load when user visits listings tab\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    }\n  };\n\n  const loadAllUsers = async () => {\n    try {\n      const users = await ApiService.getAllUsers();\n      dispatch({ type: 'SET_USERS', payload: users });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_USERS', payload: [] });\n    }\n  };\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh: boolean = false) => {\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && (now - listingsCache.timestamp) < listingsCache.ttl) {\n        console.log('Using cached listings data');\n        dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsCache.data });\n        return;\n      }\n\n      console.time('loadAllListings');\n      console.time('API call');\n      \n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      console.timeEnd('API call');\n      console.log('Raw API response:', response);\n      \n      console.time('Data processing');\n      \n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map((l: any) => {\n        // Simple ID conversion only\n        const listing = {\n          ...l, \n          id: l._id || l.id,\n          vehicleId: l.vehicleId?._id || l.vehicleId?.id || l.vehicleId,\n          sellerId: l.sellerId?._id || l.sellerId?.id || l.sellerId,\n        };\n        \n        // Only add populated data if it exists (avoid creating empty objects)\n        if (l.vehicleId && typeof l.vehicleId === 'object' && l.vehicleId._id) {\n          listing.vehicle = { \n            ...l.vehicleId, \n            id: l.vehicleId._id || l.vehicleId.id \n          };\n        }\n        \n        if (l.sellerId && typeof l.sellerId === 'object' && l.sellerId._id) {\n          listing.seller = { \n            ...l.sellerId, \n            id: l.sellerId._id || l.sellerId.id \n          };\n        }\n        \n        return listing;\n      });\n      \n      console.timeEnd('Data processing');\n      console.log('Processed listings count:', listingsWithId.length);\n      \n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      \n      dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsWithId });\n      console.timeEnd('loadAllListings');\n      \n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_ALL_LISTINGS', payload: [] });\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username: string, password: string, rememberMe: boolean = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message || 'Login failed' };\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n    \n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    \n    dispatch({ type: 'LOGOUT' });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({ data: [], timestamp: 0, ttl: 30000 });\n    \n    console.log('Logout completed - all tokens and data cleared');\n  }, []);\n\n  const register = useCallback(async (userData: Omit<User, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      return { success: false, error: error.message || 'Registration failed' };\n    }\n  }, []);\n\n  const updateUser = (user: User) => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({ type: 'SET_USER', payload: user });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n\n  const addVehicle = async (vehicleData: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => {\n    if (!state.currentUser) return;\n\n    try {\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      dispatch({ type: 'ADD_VEHICLE', payload: newVehicle });\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n\n  const updateVehicle = async (updatedVehicle: Vehicle) => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({ type: 'UPDATE_VEHICLE', payload: vehicle });\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n\n  const deleteVehicle = async (vehicleId: string) => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({ type: 'DELETE_VEHICLE', payload: vehicleId });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n\n  const addListing = async (listingData: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => {\n    if (!state.currentUser) return;\n\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing as any;\n      const listingWithId = { ...newListing, id: mongoListing._id || newListing.id };\n      dispatch({ type: 'ADD_LISTING', payload: listingWithId });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle: Vehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString(),\n        };\n        // Update local state immediately\n        dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n\n  const updateListing = async (updatedListing: Listing) => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({ type: 'UPDATE_LISTING', payload: listing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n\n  const deleteListing = async (listingId: string) => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({ type: 'DELETE_LISTING', payload: listingId });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n\n  const renewListing = async (listingId: string) => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = { ...response.listing, id: response.listing.id };\n      dispatch({ type: 'UPDATE_LISTING', payload: renewedListing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n\n  const incrementListingViews = async (listingId: string) => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n      \n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing: Listing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString(),\n        };\n        dispatch({ type: 'UPDATE_LISTING', payload: updatedListing });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n\n  const addReview = async (reviewData: Omit<Review, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n\n  const getUserProfile = (userId: string): User | null => {\n    return state.users.find(u => u.id === userId) || null;\n  };\n\n  const sendMessage = async (messageData: Omit<Message, 'id' | 'timestamp' | 'read'>) => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({ type: 'ADD_MESSAGE', payload: newMessage });\n      \n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const markMessagesAsRead = async (conversationId: string) => {\n    if (!state.currentUser) return;\n    \n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const addTrade = async (tradeData: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      const newTrade = await ApiService.createTrade(tradeData);\n      dispatch({ type: 'ADD_TRADE', payload: newTrade });\n    } catch (error) {\n      console.error('Error adding trade:', error);\n    }\n  };\n\n  const updateTrade = (updatedTrade: Trade) => {\n    const trade = { ...updatedTrade, updatedAt: new Date().toISOString() };\n    DataService.updateTrade(trade);\n    dispatch({ type: 'UPDATE_TRADE', payload: trade });\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab,\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, activeTab, setActiveTab]);\n\n  return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}