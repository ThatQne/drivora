{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thato\\\\Downloads\\\\car-app\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState, useMemo, useCallback } from 'react';\nimport { AuthService } from '../services/authService.ts';\nimport ApiService from '../services/apiService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  sales: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null\n};\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        // Reset to initial state\n        isAuthenticated: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_VEHICLES':\n      return {\n        ...state,\n        vehicles: action.payload\n      };\n    case 'ADD_VEHICLE':\n      return {\n        ...state,\n        vehicles: [...state.vehicles, action.payload]\n      };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v)\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload)\n      };\n    case 'SET_LISTINGS':\n      return {\n        ...state,\n        listings: action.payload\n      };\n    case 'ADD_LISTING':\n      return {\n        ...state,\n        listings: [...state.listings, action.payload]\n      };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l)\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload)\n      };\n    case 'SET_TRADES':\n      return {\n        ...state,\n        trades: action.payload\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        trades: [...state.trades, action.payload]\n      };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_CONVERSATIONS':\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case 'SET_REVIEWS':\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_ALL_LISTINGS':\n      return {\n        ...state,\n        allListings: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState('garage');\n  const [listingsCache, setListingsCache] = useState({\n    data: [],\n    timestamp: 0,\n    ttl: 30000\n  }); // 30 second cache\n\n  // Add loading states to prevent duplicate calls\n  const [loadingStates, setLoadingStates] = useState({\n    userData: false,\n    users: false\n  });\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          console.log('No token found, user not authenticated');\n          return;\n        }\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = {\n            ...authCheck.user,\n            id: authCheck.user._id || authCheck.user.id\n          };\n          dispatch({\n            type: 'SET_CURRENT_USER',\n            payload: user\n          });\n          await loadUserData(user.id);\n          console.log('User authenticated and data loaded');\n        } else {\n          console.log('Token invalid, clearing authentication');\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        console.log('Authentication check failed:', error);\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n    };\n    initializeAuth();\n    // DON'T load all users on startup - load them when needed\n  }, []);\n  const loadUserData = async userId => {\n    // Prevent duplicate calls\n    if (loadingStates.userData) {\n      console.log('⏳ User data already loading, skipping duplicate call');\n      return;\n    }\n    setLoadingStates(prev => ({\n      ...prev,\n      userData: true\n    }));\n    try {\n      const [vehicles, listings, messages, trades] = await Promise.all([ApiService.getUserVehicles(), ApiService.getUserListings(), ApiService.getUserMessages(), ApiService.getUserTrades()]);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const vehiclesWithId = vehicles.map(v => ({\n        ...v,\n        id: v._id || v.id\n      }));\n      const listingsWithId = listings.map(l => ({\n        ...l,\n        id: l._id || l.id\n      }));\n      const messagesWithId = messages.map(m => ({\n        ...m,\n        id: m._id || m.id\n      }));\n      const tradesWithId = trades.map(t => ({\n        ...t,\n        id: t._id || t.id\n      }));\n      dispatch({\n        type: 'SET_VEHICLES',\n        payload: vehiclesWithId\n      });\n      dispatch({\n        type: 'SET_LISTINGS',\n        payload: listingsWithId\n      });\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messagesWithId\n      });\n      dispatch({\n        type: 'SET_TRADES',\n        payload: tradesWithId\n      });\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoadingStates(prev => ({\n        ...prev,\n        userData: false\n      }));\n    }\n  };\n  const loadAllUsers = async () => {\n    try {\n      const users = await ApiService.getAllUsers();\n      const usersWithId = users.map(u => ({\n        ...u,\n        id: u._id || u.id\n      }));\n      console.log('Loaded users:', usersWithId.map(u => ({\n        id: u.id,\n        username: u.username\n      })));\n      dispatch({\n        type: 'SET_USERS',\n        payload: usersWithId\n      });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_USERS',\n        payload: []\n      });\n    }\n  };\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh = false) => {\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && now - listingsCache.timestamp < listingsCache.ttl) {\n        console.log('Using cached listings data');\n        dispatch({\n          type: 'SET_ALL_LISTINGS',\n          payload: listingsCache.data\n        });\n        return;\n      }\n      console.time('loadAllListings');\n      console.time('API call');\n\n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      console.timeEnd('API call');\n      console.log('Raw API response:', response);\n      console.time('Data processing');\n\n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map(l => {\n        // Simple ID conversion only\n        const listing = {\n          ...l,\n          id: l._id || l.id,\n          vehicleId: l.vehicleId,\n          sellerId: l.sellerId\n        };\n\n        // Add populated data if it exists from backend aggregation\n        if (l.vehicle && typeof l.vehicle === 'object' && l.vehicle._id) {\n          listing.vehicle = {\n            ...l.vehicle,\n            id: l.vehicle._id || l.vehicle.id\n          };\n        }\n        if (l.seller && typeof l.seller === 'object' && l.seller._id) {\n          listing.seller = {\n            ...l.seller,\n            id: l.seller._id || l.seller.id\n          };\n        }\n        return listing;\n      });\n      console.timeEnd('Data processing');\n      console.log('Processed listings count:', listingsWithId.length);\n\n      // Also load all users to ensure seller profiles are available\n      // This ensures getUserProfile can find sellers even if they're not in the populated data\n      try {\n        await loadAllUsers();\n        console.log('Users loaded alongside listings');\n      } catch (error) {\n        console.warn('Failed to load users alongside listings:', error);\n      }\n\n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: listingsWithId\n      });\n      console.timeEnd('loadAllListings');\n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({\n        type: 'SET_ALL_LISTINGS',\n        payload: []\n      });\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username, password, rememberMe = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  }, []);\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n\n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({\n      data: [],\n      timestamp: 0,\n      ttl: 30000\n    });\n    console.log('Logout completed - all tokens and data cleared');\n  }, []);\n  const register = useCallback(async userData => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = {\n        ...response.user,\n        id: response.user._id || response.user.id\n      };\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        payload: user\n      });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  }, []);\n  const updateUser = user => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n  const addVehicle = async vehicleData => {\n    if (!state.currentUser) return;\n    try {\n      console.log('Adding vehicle with data:', vehicleData);\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      console.log('Vehicle created by API:', newVehicle);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoVehicle = newVehicle;\n      const vehicleWithId = {\n        ...newVehicle,\n        id: mongoVehicle._id || newVehicle.id,\n        // Ensure boolean fields have default values\n        isListed: newVehicle.isListed || false,\n        isAuctioned: newVehicle.isAuctioned || false\n      };\n      console.log('Vehicle with ID conversion:', vehicleWithId);\n      dispatch({\n        type: 'ADD_VEHICLE',\n        payload: vehicleWithId\n      });\n      console.log('Vehicle added to state, current vehicles count:', state.vehicles.length + 1);\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        console.log('Reloading user data after vehicle addition');\n        await loadUserData(state.currentUser.id);\n        console.log('User data reloaded, vehicles count:', state.vehicles.length);\n      }\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n  const updateVehicle = async updatedVehicle => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({\n        type: 'UPDATE_VEHICLE',\n        payload: vehicle\n      });\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n  const deleteVehicle = async vehicleId => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({\n        type: 'DELETE_VEHICLE',\n        payload: vehicleId\n      });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n  const addListing = async listingData => {\n    if (!state.currentUser) return;\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing;\n      const listingWithId = {\n        ...newListing,\n        id: mongoListing._id || newListing.id\n      };\n      dispatch({\n        type: 'ADD_LISTING',\n        payload: listingWithId\n      });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString()\n        };\n        // Update local state immediately\n        dispatch({\n          type: 'UPDATE_VEHICLE',\n          payload: updatedVehicle\n        });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to ensure new listing appears immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n  const updateListing = async updatedListing => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: listing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n  const deleteListing = async listingId => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({\n        type: 'DELETE_LISTING',\n        payload: listingId\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n  const renewListing = async listingId => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = {\n        ...response.listing,\n        id: response.listing.id\n      };\n      dispatch({\n        type: 'UPDATE_LISTING',\n        payload: renewedListing\n      });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n\n      // Also refresh all listings to show updated renewal time\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n  const incrementListingViews = async listingId => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n\n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString()\n        };\n        dispatch({\n          type: 'UPDATE_LISTING',\n          payload: updatedListing\n        });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n  const addReview = async reviewData => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n  const getUserProfile = userId => {\n    console.log('getUserProfile called with userId:', userId);\n    console.log('Available users:', state.users.map(u => ({\n      id: u.id,\n      username: u.username\n    })));\n\n    // Try direct match first\n    let user = state.users.find(u => u.id === userId);\n\n    // If not found, try matching with MongoDB ObjectId format\n    if (!user) {\n      user = state.users.find(u => {\n        const uId = u._id || u.id;\n        return uId === userId;\n      });\n    }\n    console.log('getUserProfile result:', user ? {\n      id: user.id,\n      username: user.username\n    } : null);\n    return user || null;\n  };\n  const sendMessage = async messageData => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n\n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const markMessagesAsRead = async conversationId => {\n    if (!state.currentUser) return;\n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n  const addTrade = async tradeData => {\n    try {\n      console.log('📤 Sending trade to API:', tradeData);\n      const newTrade = await ApiService.createTrade(tradeData);\n      console.log('📥 Received trade from API:', newTrade);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoTrade = newTrade;\n      const tradeWithId = {\n        ...newTrade,\n        id: mongoTrade._id || newTrade.id\n      };\n      console.log('🔄 Trade after ID conversion:', tradeWithId);\n      dispatch({\n        type: 'ADD_TRADE',\n        payload: tradeWithId\n      });\n      console.log('✅ Trade added to state');\n    } catch (error) {\n      console.error('❌ Error adding trade:', error);\n    }\n  };\n  const updateTrade = async updatedTrade => {\n    try {\n      const trade = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n      dispatch({\n        type: 'UPDATE_TRADE',\n        payload: trade\n      });\n    } catch (error) {\n      console.error('Error updating trade:', error);\n    }\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, activeTab, setActiveTab]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 679,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"MABEFOt5B+pm7m1R9MM8veO53QQ=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","useMemo","useCallback","AuthService","ApiService","jsxDEV","_jsxDEV","initialState","currentUser","vehicles","listings","allListings","auctions","trades","messages","conversations","reviews","sales","users","isAuthenticated","loading","error","appReducer","state","action","type","payload","map","v","id","filter","l","t","AppContext","undefined","AppProvider","children","_s","dispatch","activeTab","setActiveTab","listingsCache","setListingsCache","data","timestamp","ttl","loadingStates","setLoadingStates","userData","initializeAuth","token","localStorage","getItem","console","log","authCheck","verifyToken","valid","user","_id","loadUserData","logout","userId","prev","Promise","all","getUserVehicles","getUserListings","getUserMessages","getUserTrades","vehiclesWithId","listingsWithId","messagesWithId","m","tradesWithId","loadAllUsers","getAllUsers","usersWithId","u","username","loadAllListings","forceRefresh","now","Date","length","time","response","getAllListings","timeEnd","listing","vehicleId","sellerId","vehicle","seller","warn","login","password","rememberMe","success","message","removeItem","register","updateUser","addVehicle","vehicleData","newVehicle","createVehicle","mongoVehicle","vehicleWithId","isListed","isAuctioned","updateVehicle","updatedVehicle","deleteVehicle","addListing","listingData","newListing","createListing","mongoListing","listingWithId","find","listingId","updatedAt","toISOString","updateListing","updatedListing","deleteListing","renewListing","renewedListing","incrementListingViews","getListing","views","addReview","reviewData","createReview","getUserProfile","uId","sendMessage","messageData","newMessage","markMessagesAsRead","conversationId","addTrade","tradeData","newTrade","createTrade","mongoTrade","tradeWithId","updateTrade","updatedTrade","trade","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/thato/Downloads/car-app/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode, useState, useMemo, useCallback } from 'react';\nimport { AppState, User, Vehicle, Listing, Auction, Trade, Message, Conversation, Review, NavigationTab } from '../types/index.ts';\nimport { AuthService } from '../services/authService.ts';\nimport { DataService } from '../services/dataService.ts';\nimport ApiService from '../services/apiService.ts';\n\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  login: (username: string, password: string, rememberMe?: boolean) => Promise<{ success: boolean; error?: string }>;\n  register: (userData: Omit<User, 'id' | 'createdAt'>) => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n  updateUser: (user: User) => void;\n  addVehicle: (vehicle: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => Promise<void>;\n  updateVehicle: (vehicle: Vehicle) => Promise<void>;\n  deleteVehicle: (vehicleId: string) => Promise<void>;\n  addListing: (listing: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => Promise<void>;\n  updateListing: (listing: Listing) => Promise<void>;\n  deleteListing: (listingId: string) => Promise<void>;\n  renewListing: (listingId: string) => Promise<void>;\n  incrementListingViews: (listingId: string) => Promise<void>;\n  loadAllListings: (forceRefresh?: boolean) => Promise<void>;\n  addReview: (review: Omit<Review, 'id' | 'createdAt'>) => Promise<void>;\n  getUserProfile: (userId: string) => User | null;\n  sendMessage: (message: Omit<Message, 'id' | 'timestamp' | 'read'>) => Promise<void>;\n  markMessagesAsRead: (conversationId: string) => Promise<void>;\n  addTrade: (trade: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateTrade: (trade: Trade) => Promise<void>;\n  activeTab: NavigationTab;\n  setActiveTab: (tab: NavigationTab) => void;\n}\n\ntype AppAction = \n  | { type: 'SET_USER'; payload: User | null }\n  | { type: 'SET_CURRENT_USER'; payload: User }\n  | { type: 'LOGOUT' }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_VEHICLES'; payload: Vehicle[] }\n  | { type: 'ADD_VEHICLE'; payload: Vehicle }\n  | { type: 'UPDATE_VEHICLE'; payload: Vehicle }\n  | { type: 'DELETE_VEHICLE'; payload: string }\n  | { type: 'SET_LISTINGS'; payload: Listing[] }\n  | { type: 'SET_ALL_LISTINGS'; payload: Listing[] }\n  | { type: 'ADD_LISTING'; payload: Listing }\n  | { type: 'UPDATE_LISTING'; payload: Listing }\n  | { type: 'DELETE_LISTING'; payload: string }\n  | { type: 'SET_TRADES'; payload: Trade[] }\n  | { type: 'ADD_TRADE'; payload: Trade }\n  | { type: 'UPDATE_TRADE'; payload: Trade }\n  | { type: 'SET_MESSAGES'; payload: Message[] }\n  | { type: 'ADD_MESSAGE'; payload: Message }\n  | { type: 'SET_CONVERSATIONS'; payload: Conversation[] }\n  | { type: 'SET_REVIEWS'; payload: Review[] }\n  | { type: 'SET_USERS'; payload: User[] }\n  | { type: 'SET_ACTIVE_TAB'; payload: NavigationTab };\n\nconst initialState: AppState = {\n  currentUser: null,\n  vehicles: [],\n  listings: [],\n  allListings: [],\n  auctions: [],\n  trades: [],\n  messages: [],\n  conversations: [],\n  reviews: [],\n  sales: [],\n  users: [],\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n};\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: action.payload !== null,\n      };\n    case 'SET_CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true,\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState, // Reset to initial state\n        isAuthenticated: false,\n      };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SET_VEHICLES':\n      return { ...state, vehicles: action.payload };\n    case 'ADD_VEHICLE':\n      return { ...state, vehicles: [...state.vehicles, action.payload] };\n    case 'UPDATE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.map(v => v.id === action.payload.id ? action.payload : v),\n      };\n    case 'DELETE_VEHICLE':\n      return {\n        ...state,\n        vehicles: state.vehicles.filter(v => v.id !== action.payload),\n      };\n    case 'SET_LISTINGS':\n      return { ...state, listings: action.payload };\n    case 'ADD_LISTING':\n      return { ...state, listings: [...state.listings, action.payload] };\n    case 'UPDATE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.map(l => l.id === action.payload.id ? action.payload : l),\n      };\n    case 'DELETE_LISTING':\n      return {\n        ...state,\n        listings: state.listings.filter(l => l.id !== action.payload),\n      };\n    case 'SET_TRADES':\n      return { ...state, trades: action.payload };\n    case 'ADD_TRADE':\n      return { ...state, trades: [...state.trades, action.payload] };\n    case 'UPDATE_TRADE':\n      return {\n        ...state,\n        trades: state.trades.map(t => t.id === action.payload.id ? action.payload : t),\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'ADD_MESSAGE':\n      return { ...state, messages: [...state.messages, action.payload] };\n    case 'SET_CONVERSATIONS':\n      return { ...state, conversations: action.payload };\n    case 'SET_REVIEWS':\n      return { ...state, reviews: action.payload };\n    case 'SET_USERS':\n      return { ...state, users: action.payload };\n    case 'SET_ALL_LISTINGS':\n      return { ...state, allListings: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport function AppProvider({ children }: AppProviderProps) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [activeTab, setActiveTab] = React.useState<NavigationTab>('garage');\n  const [listingsCache, setListingsCache] = useState<{\n    data: any[];\n    timestamp: number;\n    ttl: number;\n  }>({ data: [], timestamp: 0, ttl: 30000 }); // 30 second cache\n  \n  // Add loading states to prevent duplicate calls\n  const [loadingStates, setLoadingStates] = useState<{\n    userData: boolean;\n    users: boolean;\n  }>({ userData: false, users: false });\n\n  useEffect(() => {\n    // Initialize app state by checking API authentication\n    const initializeAuth = async () => {\n      try {\n        // Only check if there's a token present\n        const token = localStorage.getItem('carTrade_token');\n        if (!token) {\n          console.log('No token found, user not authenticated');\n          return;\n        }\n\n        const authCheck = await ApiService.verifyToken();\n        if (authCheck.valid && authCheck.user) {\n          const user = { ...authCheck.user, id: (authCheck.user as any)._id || authCheck.user.id };\n          dispatch({ type: 'SET_CURRENT_USER', payload: user });\n          await loadUserData(user.id);\n          console.log('User authenticated and data loaded');\n        } else {\n          console.log('Token invalid, clearing authentication');\n          ApiService.logout();\n          AuthService.logout();\n        }\n      } catch (error) {\n        console.log('Authentication check failed:', error);\n        // Clear any stale tokens on error\n        ApiService.logout();\n        AuthService.logout();\n        dispatch({ type: 'LOGOUT' });\n      }\n    };\n\n    initializeAuth();\n    // DON'T load all users on startup - load them when needed\n  }, []);\n\n  const loadUserData = async (userId: string) => {\n    // Prevent duplicate calls\n    if (loadingStates.userData) {\n      console.log('⏳ User data already loading, skipping duplicate call');\n      return;\n    }\n\n    setLoadingStates(prev => ({ ...prev, userData: true }));\n    \n    try {\n      const [vehicles, listings, messages, trades] = await Promise.all([\n        ApiService.getUserVehicles(),\n        ApiService.getUserListings(),\n        ApiService.getUserMessages(),\n        ApiService.getUserTrades()\n      ]);\n\n      // Convert MongoDB _id to id for frontend compatibility\n      const vehiclesWithId = vehicles.map((v: any) => ({ ...v, id: v._id || v.id }));\n      const listingsWithId = listings.map((l: any) => ({ ...l, id: l._id || l.id }));\n      const messagesWithId = messages.map((m: any) => ({ ...m, id: m._id || m.id }));\n      const tradesWithId = trades.map((t: any) => ({ ...t, id: t._id || t.id }));\n\n      dispatch({ type: 'SET_VEHICLES', payload: vehiclesWithId });\n      dispatch({ type: 'SET_LISTINGS', payload: listingsWithId });\n      dispatch({ type: 'SET_MESSAGES', payload: messagesWithId });\n      dispatch({ type: 'SET_TRADES', payload: tradesWithId });\n      \n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoadingStates(prev => ({ ...prev, userData: false }));\n    }\n  };\n\n  const loadAllUsers = async () => {\n    try {\n      const users = await ApiService.getAllUsers();\n      const usersWithId = users.map((u: any) => ({ \n        ...u, \n        id: u._id || u.id \n      }));\n      console.log('Loaded users:', usersWithId.map(u => ({ id: u.id, username: u.username })));\n      dispatch({ type: 'SET_USERS', payload: usersWithId });\n    } catch (error) {\n      console.error('Error loading users:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_USERS', payload: [] });\n    }\n  };\n\n  // Memoize callback functions to prevent unnecessary re-renders\n  const loadAllListings = useCallback(async (forceRefresh: boolean = false) => {\n    try {\n      // Check cache first (unless force refresh)\n      const now = Date.now();\n      if (!forceRefresh && listingsCache.data.length > 0 && (now - listingsCache.timestamp) < listingsCache.ttl) {\n        console.log('Using cached listings data');\n        dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsCache.data });\n        return;\n      }\n\n      console.time('loadAllListings');\n      console.time('API call');\n      \n      // Load all public listings from the API\n      const response = await ApiService.getAllListings();\n      console.timeEnd('API call');\n      console.log('Raw API response:', response);\n      \n      console.time('Data processing');\n      \n      // Optimize data processing - avoid complex operations in map\n      const listingsWithId = response.listings.map((l: any) => {\n        // Simple ID conversion only\n        const listing = {\n          ...l, \n          id: l._id || l.id,\n          vehicleId: l.vehicleId,\n          sellerId: l.sellerId,\n        };\n        \n        // Add populated data if it exists from backend aggregation\n        if (l.vehicle && typeof l.vehicle === 'object' && l.vehicle._id) {\n          listing.vehicle = { \n            ...l.vehicle, \n            id: l.vehicle._id || l.vehicle.id \n          };\n        }\n        \n        if (l.seller && typeof l.seller === 'object' && l.seller._id) {\n          listing.seller = { \n            ...l.seller, \n            id: l.seller._id || l.seller.id \n          };\n        }\n        \n        return listing;\n      });\n      \n      console.timeEnd('Data processing');\n      console.log('Processed listings count:', listingsWithId.length);\n      \n      // Also load all users to ensure seller profiles are available\n      // This ensures getUserProfile can find sellers even if they're not in the populated data\n      try {\n        await loadAllUsers();\n        console.log('Users loaded alongside listings');\n      } catch (error) {\n        console.warn('Failed to load users alongside listings:', error);\n      }\n      \n      // Update cache\n      setListingsCache({\n        data: listingsWithId,\n        timestamp: now,\n        ttl: 30000\n      });\n      \n      dispatch({ type: 'SET_ALL_LISTINGS', payload: listingsWithId });\n      console.timeEnd('loadAllListings');\n      \n    } catch (error) {\n      console.error('Error loading all listings:', error);\n      // Fallback to empty array if API fails\n      dispatch({ type: 'SET_ALL_LISTINGS', payload: [] });\n    }\n  }, [listingsCache.data, listingsCache.timestamp, listingsCache.ttl]);\n\n  // Memoize other frequently used functions\n  const login = useCallback(async (username: string, password: string, rememberMe: boolean = false) => {\n    try {\n      const response = await ApiService.login(username, password);\n      // The ApiService.login should automatically store the token\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful login\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message || 'Login failed' };\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    // Clear both API token and AuthService localStorage data\n    ApiService.logout();\n    AuthService.logout();\n    \n    // Clear any additional auth-related localStorage items\n    localStorage.removeItem('carTrade_remember');\n    \n    dispatch({ type: 'LOGOUT' });\n    setActiveTab('garage');\n    // Clear cache on logout\n    setListingsCache({ data: [], timestamp: 0, ttl: 30000 });\n    \n    console.log('Logout completed - all tokens and data cleared');\n  }, []);\n\n  const register = useCallback(async (userData: Omit<User, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.register(userData);\n      const user = { ...response.user, id: (response.user as any)._id || response.user.id };\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n      // Load user data after successful registration\n      await loadUserData(user.id);\n      return { success: true };\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      return { success: false, error: error.message || 'Registration failed' };\n    }\n  }, []);\n\n  const updateUser = (user: User) => {\n    try {\n      console.log('Context updateUser called with:', user);\n      AuthService.updateUser(user);\n      dispatch({ type: 'SET_USER', payload: user });\n      console.log('User updated successfully in context');\n    } catch (error) {\n      console.error('Error in context updateUser:', error);\n      throw error;\n    }\n  };\n\n  const addVehicle = async (vehicleData: {\n    make: string;\n    model: string;\n    year: number;\n    vin: string;\n    mileage: number;\n    transmission: 'manual' | 'automatic';\n    estimatedValue: number;\n    customPrice?: number;\n    images?: string[];\n  }) => {\n    if (!state.currentUser) return;\n\n    try {\n      console.log('Adding vehicle with data:', vehicleData);\n      const newVehicle = await ApiService.createVehicle(vehicleData);\n      console.log('Vehicle created by API:', newVehicle);\n      \n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoVehicle = newVehicle as any;\n      const vehicleWithId = { \n        ...newVehicle, \n        id: mongoVehicle._id || newVehicle.id,\n        // Ensure boolean fields have default values\n        isListed: newVehicle.isListed || false,\n        isAuctioned: newVehicle.isAuctioned || false\n      };\n      \n      console.log('Vehicle with ID conversion:', vehicleWithId);\n      dispatch({ type: 'ADD_VEHICLE', payload: vehicleWithId });\n      console.log('Vehicle added to state, current vehicles count:', state.vehicles.length + 1);\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        console.log('Reloading user data after vehicle addition');\n        await loadUserData(state.currentUser.id);\n        console.log('User data reloaded, vehicles count:', state.vehicles.length);\n      }\n    } catch (error) {\n      console.error('Error adding vehicle:', error);\n    }\n  };\n\n  const updateVehicle = async (updatedVehicle: Vehicle) => {\n    try {\n      const vehicle = await ApiService.updateVehicle(updatedVehicle.id, updatedVehicle);\n      dispatch({ type: 'UPDATE_VEHICLE', payload: vehicle });\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n    }\n  };\n\n  const deleteVehicle = async (vehicleId: string) => {\n    try {\n      await ApiService.deleteVehicle(vehicleId);\n      dispatch({ type: 'DELETE_VEHICLE', payload: vehicleId });\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n    }\n  };\n\n  const addListing = async (listingData: Omit<Listing, 'id' | 'createdAt' | 'updatedAt' | 'views'>) => {\n    if (!state.currentUser) return;\n\n    try {\n      const newListing = await ApiService.createListing(listingData);\n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoListing = newListing as any;\n      const listingWithId = { ...newListing, id: mongoListing._id || newListing.id };\n      dispatch({ type: 'ADD_LISTING', payload: listingWithId });\n\n      // Update vehicle to mark as listed immediately in local state\n      const vehicle = state.vehicles.find(v => v.id === listingData.vehicleId);\n      if (vehicle) {\n        const updatedVehicle: Vehicle = {\n          ...vehicle,\n          isListed: true,\n          listingId: listingWithId.id,\n          updatedAt: new Date().toISOString(),\n        };\n        // Update local state immediately\n        dispatch({ type: 'UPDATE_VEHICLE', payload: updatedVehicle });\n      }\n\n      // Reload all user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to ensure new listing appears immediately\n      await loadAllListings(true);\n      \n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  };\n\n  const updateListing = async (updatedListing: Listing) => {\n    try {\n      const listing = await ApiService.updateListing(updatedListing.id, updatedListing);\n      dispatch({ type: 'UPDATE_LISTING', payload: listing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to ensure price changes are visible immediately\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error updating listing:', error);\n    }\n  };\n\n  const deleteListing = async (listingId: string) => {\n    try {\n      await ApiService.deleteListing(listingId);\n      dispatch({ type: 'DELETE_LISTING', payload: listingId });\n\n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n\n  const renewListing = async (listingId: string) => {\n    try {\n      const response = await ApiService.renewListing(listingId);\n      const renewedListing = { ...response.listing, id: response.listing.id };\n      dispatch({ type: 'UPDATE_LISTING', payload: renewedListing });\n      \n      // Reload user data to ensure everything is in sync\n      if (state.currentUser) {\n        await loadUserData(state.currentUser.id);\n      }\n      \n      // Also refresh all listings to show updated renewal time\n      await loadAllListings(true);\n    } catch (error) {\n      console.error('Error renewing listing:', error);\n    }\n  };\n\n  const incrementListingViews = async (listingId: string) => {\n    try {\n      // The backend automatically increments views when getting a listing\n      await ApiService.getListing(listingId);\n      \n      // Update local state by incrementing views\n      const listing = state.listings.find(l => l.id === listingId);\n      if (listing) {\n        const updatedListing: Listing = {\n          ...listing,\n          views: listing.views + 1,\n          updatedAt: new Date().toISOString(),\n        };\n        dispatch({ type: 'UPDATE_LISTING', payload: updatedListing });\n      }\n    } catch (error) {\n      console.error('Error incrementing listing views:', error);\n    }\n  };\n\n  const addReview = async (reviewData: Omit<Review, 'id' | 'createdAt'>) => {\n    try {\n      const response = await ApiService.createReview(reviewData);\n      // Reload all data to update ratings\n      await loadAllListings();\n    } catch (error) {\n      console.error('Error adding review:', error);\n    }\n  };\n\n  const getUserProfile = (userId: string): User | null => {\n    console.log('getUserProfile called with userId:', userId);\n    console.log('Available users:', state.users.map(u => ({ id: u.id, username: u.username })));\n    \n    // Try direct match first\n    let user = state.users.find(u => u.id === userId);\n    \n    // If not found, try matching with MongoDB ObjectId format\n    if (!user) {\n      user = state.users.find(u => {\n        const uId = (u as any)._id || u.id;\n        return uId === userId;\n      });\n    }\n    \n    console.log('getUserProfile result:', user ? { id: user.id, username: user.username } : null);\n    return user || null;\n  };\n\n  const sendMessage = async (messageData: Omit<Message, 'id' | 'timestamp' | 'read'>) => {\n    try {\n      const newMessage = await ApiService.sendMessage(messageData);\n      dispatch({ type: 'ADD_MESSAGE', payload: newMessage });\n      \n      // For now, we'll skip reloading conversations since the API method doesn't exist yet\n      // TODO: Implement getUserConversations in ApiService\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const markMessagesAsRead = async (conversationId: string) => {\n    if (!state.currentUser) return;\n    \n    try {\n      await ApiService.markMessagesAsRead(conversationId);\n      const messages = await ApiService.getUserMessages();\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\n      // TODO: Reload conversations when API method is available\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const addTrade = async (tradeData: Omit<Trade, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      console.log('📤 Sending trade to API:', tradeData);\n      const newTrade = await ApiService.createTrade(tradeData);\n      console.log('📥 Received trade from API:', newTrade);\n      \n      // Convert MongoDB _id to id for frontend compatibility\n      const mongoTrade = newTrade as any;\n      const tradeWithId = { ...newTrade, id: mongoTrade._id || newTrade.id };\n      console.log('🔄 Trade after ID conversion:', tradeWithId);\n      \n      dispatch({ type: 'ADD_TRADE', payload: tradeWithId });\n      console.log('✅ Trade added to state');\n    } catch (error) {\n      console.error('❌ Error adding trade:', error);\n    }\n  };\n\n  const updateTrade = async (updatedTrade: Trade) => {\n    try {\n      const trade = await ApiService.updateTrade(updatedTrade.id, updatedTrade);\n      dispatch({ type: 'UPDATE_TRADE', payload: trade });\n    } catch (error) {\n      console.error('Error updating trade:', error);\n    }\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch,\n    login,\n    register,\n    logout,\n    updateUser,\n    addVehicle,\n    updateVehicle,\n    deleteVehicle,\n    addListing,\n    updateListing,\n    deleteListing,\n    renewListing,\n    incrementListingViews,\n    loadAllListings,\n    addReview,\n    getUserProfile,\n    sendMessage,\n    markMessagesAsRead,\n    addTrade,\n    updateTrade,\n    activeTab,\n    setActiveTab,\n  }), [state, dispatch, login, logout, updateUser, addVehicle, updateVehicle, deleteVehicle, addListing, updateListing, deleteListing, renewListing, incrementListingViews, loadAllListings, addReview, getUserProfile, sendMessage, markMessagesAsRead, addTrade, updateTrade, activeTab, setActiveTab]);\n\n  return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}